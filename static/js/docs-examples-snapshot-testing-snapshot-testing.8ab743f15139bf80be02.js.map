{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/docs/examples/snapshot-testing/PostList.tsx","/Users/olavo/Projects/node-factory/docs/examples/snapshot-testing/PostFactory.ts","/Users/olavo/Projects/node-factory/docs/components/EchoJS.tsx","/Users/olavo/Projects/node-factory/docs/examples/snapshot-testing/snapshot-testing.mdx","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["json","styles","parse","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","PostList","list","map","post","id","href","title","PostFactory","factory","fake","random","uuid","lorem","sentence","children","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","FormatJson","create","__position","__code","__scope","this","Link","Playground","EchoJS","__codesandbox","make","isMDXComponent","isObject","variable","constructor","Object","resolveArgs","args","reduce","resolved","arg","length","data","merge","overrides","keys","values","override","rest","generator","faker","factoryObject","count","Array","from","only","isArray","filtered","seed","value"],"mappings":"yHAAA,kDAiCe,oBA9BUA,EACjBC,EA6BUC,EAAH,EAAGA,MAAH,OACb,yBAAKC,MAAO,CACVC,WAAY,UACZC,WAAY,oBACZC,MAAO,UACPC,OAAQ,mBACRC,QAAS,OACTC,UAAW,SACXC,SAAU,OACVC,SAAU,OACVC,UAAW,QACVC,wBAAyB,CAAEC,QAzCPd,EAyC+BE,IAxChDD,EAAS,CACbc,OAAQ,iBACRC,IAAK,iBACLC,OAAQ,iBACRC,QAAS,iBACTC,KAAM,kBAGW,iBAARnB,IACNA,EAAOoB,KAAKC,UAAUrB,OAAMsB,EAAW,KAE5CtB,EAAOA,EAAKuB,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,KAAM,SAC3DA,QAAQ,yGAA0G,SAAUC,GACpI,IAAIC,EAAM,SAYV,MAXI,KAAKC,KAAKF,GAENC,EADA,KAAKC,KAAKF,GACJ,MAEA,SAEH,aAAaE,KAAKF,GACzBC,EAAM,UACC,OAAOC,KAAKF,KACnBC,EAAM,QAEH,gBAAkBxB,EAAOwB,GAAO,KAAOD,EAAQ,kB,4TC3BtDG,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,oCACE,qCACA,4BACGA,EAAKC,IAAI,SAAAC,GAAI,OACZ,wBAAId,IAAKc,EAAKC,IACZ,uBAAGC,KAAI,iBAAYF,EAAKC,KAAOD,EAAKG,aAO/BN,I,yNCbTO,EAAcC,kBAAQ,SAAAC,GAAI,MAAK,CACnCL,GAAIK,EAAKC,OAAOC,OAChBL,MAAOG,EAAKG,MAAMC,cAGLN,I,4NCJA,sBAAGO,EAAH,EAAGA,SAAH,OACb,yBAAKtC,MAAO,CACVC,WAAY,UACZC,WAAY,oBACZC,MAAO,UACPC,OAAQ,kBACRC,QAAS,OACTC,UAAW,SACXC,SAAU,OACVC,SAAU,OACVC,UAAW,SAEZ6B,M,8ECJH,IAKMC,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,uEAAsD,+BAAGC,WAAW,KAAQ,CACxE,KAAQ,wBAD0C,YAAtD,2CAGe,+BAAGA,WAAW,KAAQ,CACjC,KAAQ,+CADG,aAHf,4QASA,2FACA,iBAAQ,CACN,GAAM,WADR,WAGA,2EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sNAYL,YAACC,EAAA,EAAD,CAAY/C,MAAO,kBAAMgC,EAAYgB,UAAUH,QAAQ,eACvD,iBAAQ,CACN,GAAM,aADR,aAGA,qFACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,kUAoBL,YAAC,IAAD,CAAYG,WAAY,EAAGC,OAAQ,gDAAiDC,QAAS,CAC3FP,MAAOQ,KAAOA,KAAKR,MAAQA,EAC3BS,SACAC,eACA7B,WACAO,cACAuB,SACAR,gBACCS,cAAa,w1JAA21JX,QAAQ,cACp3J,kBAAM,YAAC,EAAD,CAAUnB,KAAMM,EAAYyB,KAAK,GAAIZ,QAAQ,eAElD,iBAAQ,CACN,GAAM,oBADR,oBAGA,6GACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,obAiBL,wEACA,YAACS,EAAD,CAAQV,QAAQ,UAAU,iBAAM,sUAChC,sFACA,YAACU,EAAD,CAAQV,QAAQ,UAAU,iBAAM,oiBAChC,iBAAQ,CACN,GAAM,gBADR,gBAGA,gLACuC,sBAAQC,WAAW,KAAnB,OADvC,oDACmI,0BAAYA,WAAW,KAAvB,QADnI,kEAE2D,+BAAGA,WAAW,KAAQ,CAC7E,KAAQ,cACP,0BAAYA,WAAW,KAAvB,QAFsD,WAF3D,KAKA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8eAkBL,mFACA,YAACS,EAAD,CAAQV,QAAQ,UAAU,iBAAM,oO,yMAKpCH,EAAWgB,gBAAiB,G,gDCpJ5B,gCAAO,IAAMC,EAAW,SAACC,GACvB,OAAOA,GAAgC,kBAAbA,GAAyBA,EAASC,cAAgBC,Q,g4CCKvE,IAAMC,EAAc,sCAAIC,EAAJ,yBAAIA,EAAJ,uBACzBA,EAAKC,OACH,SAACC,EAAUC,GACT,MAAmB,kBAARA,EACF,EAAP,GAAYD,EAAZ,CAAsBE,OAAQD,EAAM,EAAIA,EAAM,IACtB,kBAARA,EACT,EAAP,GAAYD,EAAZ,CAAsBG,KAAMF,IAErBD,GAGX,CAAEE,OAAQ,EAAGC,KAAM,M,mKAGhB,IAAMC,EAAQ,SAARA,EAASD,EAAmBE,GACvC,OAAOT,OAAOU,KAAKH,GAAMJ,OAAO,SAACQ,EAAQ3D,GACvC,IAAKyD,EAAUzD,GACb,OAAO,EAAP,GACK2D,EADL,eAEG3D,EAAO6C,YAASU,EAAKvD,IAAoBwD,EAAMD,EAAKvD,GAAMyD,GAA7BF,EAAKvD,KAJQ,MAQVyD,EAAtBG,EARgC,EAQtC5D,GAAmB6D,EARmB,eAQtC7D,GARsC,QAY/C,OAHA2D,EAAM,KAAQA,EAAR,eAAiB3D,EAAM4D,IAC7BH,EAAYI,EAELF,GACN,K,6JAGE,IAAMxC,EAAU,SAAC2C,GACtB,IAAM5B,EAAS,WAA+C,IAA9CuB,EAA6C,uDAApB,GACjCF,EAAOO,EAAUC,KAEvB,OAAOP,EAAMD,EAAME,IAsBfO,EAAgC,CAAE9B,SAAQS,KAnBnC,WAA8E,IAA7EsB,EAA4E,uDAA9C,EAAGR,EAA2C,yCAC/DR,EAAYgB,EAAOR,GAApCF,EADgF,EAChFA,KAAMD,EAD0E,EAC1EA,OAEd,OAAOY,MAAMC,KAAK,CAAEb,WAAUzC,IAAI,kBAAMqB,EAAOqB,MAgBKa,KAbzC,SAACV,GAAuE,IAA9CD,EAA6C,uDAApB,GACxDF,EAAOrB,EAAOuB,GAEpB,OAAOS,MAAMG,QAAQX,GACjBA,EAAKP,OAAO,SAACmB,EAAuBtE,GAAxB,YAAsCsE,EAAtC,eAAiDtE,EAAMuD,EAAKvD,MAAS,IAD9E,eAEA0D,EAAOH,EAAKG,KAQuCa,KAL/C,SAACC,GAEZ,OADAT,IAAMQ,KAAKC,GACJR,IAKT,OAAOA,G","file":"static/js/docs-examples-snapshot-testing-snapshot-testing.c1c42589.js","sourcesContent":["// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","import React from 'react';\n\nconst PostList = ({ list }) => (\n  <>\n    <h2>Posts</h2>\n    <ul>\n      {list.map(post => (\n        <li key={post.id}>\n          <a href={`/posts/${post.id}`}>{post.title}</a>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nexport default PostList;\n","import { factory } from '../../../src/index';\n\nconst PostFactory = factory(fake => ({\n  id: fake.random.uuid(),\n  title: fake.lorem.sentence(),\n}));\n\nexport default PostFactory;\n","// tslint:disable\nimport React from 'react';\n\nexport default ({ children }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '25px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }}>\n  {children()}\n  </pre>\n);\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link, Playground } from 'docz';\nimport PostList from './PostList';\nimport PostFactory from './PostFactory';\nimport EchoJS from '../../components/EchoJS';\nimport FormatJson from '../../components/FormatJson';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"snapshot-testing\"\n    }}>{`Snapshot testing`}</h1>\n    <p>{`When working with component libraries, such as `}<a parentName=\"p\" {...{\n        \"href\": \"http://reactjs.org/\"\n      }}>{`React.js`}</a>{`, a common pattern of\ntesting is using `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/docs/en/snapshot-testing\"\n      }}>{`snapshots`}</a>{`. These are particularly\nuseful to make sure your UI does not change unexpectedly. But, because of this, using random data\nto test snapshots creates a problems since, because the data changes, the snapshots will also\nchange. Let's see how we can deal with this.`}</p>\n    <p>{`For the sake of this example, let's say we are testing a blog app.`}</p>\n    <h2 {...{\n      \"id\": \"factory\"\n    }}>{`Factory`}</h2>\n    <p>{`To start, we might have a factory in the likes of:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostFactory.js\nimport { factory } from 'node-factory';\n\nconst PostFactory = factory(fake => ({\n  id: fake.random.uuid(),\n  title: fake.lorem.sentence(),\n}));\n\nexport default PostFactory;\n`}</code></pre>\n    <FormatJson parse={() => PostFactory.create()} mdxType=\"FormatJson\" />\n    <h2 {...{\n      \"id\": \"component\"\n    }}>{`Component`}</h2>\n    <p>{`So let's say we have a component which lists the blog posts:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostList.jsx\nimport React from 'react';\n\nconst PostList = ({ list }) => (\n  <>\n    <h2>Posts</h2>\n    <ul>\n      {list.map(post => (\n        <li key={post.id}>\n          <a href={\\`#/posts/\\${post.id}\\`}>{post.title}</a>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nexport default PostList;\n`}</code></pre>\n    <Playground __position={1} __code={'() => <PostList list={PostFactory.make(2)} />'} __scope={{\n      props: this ? this.props : props,\n      Link,\n      Playground,\n      PostList,\n      PostFactory,\n      EchoJS,\n      FormatJson\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AAGTQbYlgABSgVxEhSIRQgwdh5FdY12gPAAvP1-TtKYEMoFFYJRHDZXaD0DzgT0sG9Ml4EkOBUFmOBhgtWgUQKSQyIo2wXxVVBiPVdhBIIAAxM0hWSI0aLo04GJ_FiGPYzjuPNXiYhnATyJkuSBESIiIPYM9yGGAApZxqPdaQVIBdN9AYyybOcMySPYaShSiAhrLgZlFIc-jnPXGgGN8gR_MC6gvIkwNJXs-UzXaMFUF0KiCOcAhEixdhuHYYB1iiARnlQK52gABnYJMZiwdo92rGYOxYGcqoAFga9gADYGqa9YwGA2SiGgRIqv4ZxDgRB1MEkoR-CWIhqHI1qEUG6thpoZwIHwy52AARk65r5AyrKpgAQTmQr2AjKCrOgdAwywjlCrEO7oxkdgUXymBuGAHK8qxeQtxrYBHqgZ7ggAMhh8ZEnmShmkh6HzG4DG5TADDJQGVB2nYAB-DYnrDCM3quVGwzO6spBkKs3zMGEJMwMAwigKZyfe2trvrYAue4D7GCkyipigYSAak2TJXknAom2GAIwAJg5bDN3kKRearL8QDCtSsTYji7m03T-JF4ScAIOAsEA3QQIMMDxPtJKpTdVLFVEswLskwzRdu-72HFqj5DewXPtpsGEzwJWxCkuAKxjldGFCKBI_BoOCDl2YI0FKiw6jasaxrRhxfYBXEgB3PM64UGVyLhNXF8LowAB4pJCrhiABJgCrnAa-KUGe8My2XlgDXJFcNOi6kcWp_YDlVaTyQU7BqQGc950sG81n2dI33hNEnW9aY38NKNriRB0-A9JSAyUWliITMtrQKGA_QGCdyDDWM5JsJC2iPQ4EAR6OAAhyCSFUNgP0XtqBUSlj_W6bMZYmQjGzBW3N7rrC4FcNBf5MgYEiDgUIoQuDk2ahYGIBBYA4NcArHAUAhQwCIDgOA-h4SKw5KdBeG9mb2h3inPe98f6HyULrJynwIpW0kO5Sgtln4220Hbd-YFHjjDgOLGgiAWAVA8LAW0iVNQpVNB7DKvCpj8I5ndB6NgoYvRDhg6M_Zui_VgADEqhd2AeAlNsNCbQMBVQAMRnjPNJQ60kACsm0i5eAEFOaCMAwAECquEnqQVxY5ACfYM8WpOpajPFEmsVAGFljlAEgA7FqAAHAATmqfYApFgyoVSqkrFJPhaqtJ6krAa5CaytU7AUFp1Uekrm2gQXKf0qovHiLEBphpgK7X2lVQ6lSRkeKiFgAA6lwCYyzqrVQAKRzMoKwDIYAGEjAAJpVTCBEAp8ha7VghjYtG5MabbicevMwR9xGOmoK5SQ0VYpBVQPI22b9QIgFUVbDRSTtGuF0YyMS5kXZGM1NA1A2NMrdnMHARINBXBYAABIQBSHgcWZKCARk0NQN67iLDexcfAW69KayoFCEQQIJT2hFKFFcAJSZOrVOqlqepvSLDlyqrykpATer2GvErM8145komnCkKVlBin8sFcK0VcyvCavFJVOU0r-W9SVoda8Ky5nsoSBqrV7AglJkFUraS9yN4WAgM0CMeUkbNBpeYAAhEVdoqqCivmKnXCwAbbq2R1AAORYaiAoXrEjUpBUsDCrM0DZCWCrUSFh3nsBjUVANoYYBkglIrSQMMnhLHaDDZiSpXzlsrQiCMkgpApHrTDDmzaOStuQu2zcda5QwxSAQftBaJyjj6OYMtXQ23VqjCAKMvB12hAANquHNPhS65oABa1VzTVIALrAE6vIAAPuu9dm6AB6oRT1Xofbe9dIBT0clMKu9dcAjCckJje3gHgfVohgFetmUBWFXttVALkwGr3mkJuu9AABqCMhNEDrpwChowHJCYYcQJumAZ5T2btQ-u80p7kO8DQ_hjko6sW42ZBGfyVk6VRtYK4I45AoO3XaOyzlGQ_T104N6yQ97-CSEttfVj0R2McY8aJr1d1JCIE7tJ3ScmCAKcjUp0ThS-MhvLiJgzhboRQe6KyszRdeN2BDWGmcpmzNFqLthecrCxOqdRAyCD8RWGadk2xvAC89M2Z6EZuUBryT42nW5iznmVMdtg4FlE2ndPWYM3Z_jsHnM1lczWLoBA51ykYHAVquLgb_X4ATVDP0qtwE3XZ097A6vpRAGIWr7BgutdK2xCrnXp0h1EjTJmW8WYJN3lYvs3HPP2Pzo4ro9W_puJXF4nYvis2BOCaEiJ-qhRxISUkuUbSfqaq4I6rJOS8lzNNaUipNS6lzKaWgKq5okzDPaewTpPhumNXFTNgZHU5RK0-3MsZEzqFymmeLcg4OFl7QOu0FZayi4bO2egXZcpDr7KOQDk5ZyLnXLlLcyg9zsLoHcGkdC6jEjOFHA0VAzoBBEssHqaCbj2AAH0ueEBIFcPFBLiWkvJSLqlrUBCsPJm9B57BNxmA_N80RoDwGQNwFbcFehIWf2_grI4_9cECASvaKCtgdQeHUFsKYf83Yek2FAWEcBjdfwfvJAA4ukTIj8lgNC1NEVw5vLeSh967kygerdYRSh6X18AMVmPYEYKPkgY9O54eN-03suhpNOZdcq9m7pAJwNxlI9wQioESJuz9Vxff-_D8lQW6xi9wHLegUI7aVwRiz5q05iwQjlVDh9TLnrvUx-Rn32cGMQ2Ca5RGofhXZ0CHMFBQvXeoA96WLAGcWPi_sA-rVYmO-riHSwnF_LCXuhJdH80Hfk-5SUAt1b2fUaLBFZK8voBq_1_HH91cHf8hT_mYeZWbP4zrFaL4zrZ7ZAAFYQrhKArhQSb4Tp4BH5LCU4ECuBXDADYRwHViK7-ibzeTexHjlTdBFQRhoEYGNB-7oF14EBLAE4CD9DlDV7UEB4P6SgcgsG17sFTBhysqv7gG0E4DlxwDkH-4DpdCt7toRhcZQAMhwBLDlwD5hY1hJaBoMFMHwCbrlyfoqFFwCFL4gGF6yHyEA5FzaEwCJCnpXCBpm48FiHoEWFWFvTEwUFOEtZXDEFpAOGuDuH0GnKMFcDwCcJRr_6wEZS2awJfzuFXAaFBFLAr7XyR5FRxHlCn4mHMpFTv44AZEKHsAxF7ABGaEn4ripGZEQGToRHz5gHmC5FDZLBYF4FhH4Hx7exIKPzJBkFpDM7RB8o-Q_we49GPycGNCh6JC0HcysrezkCmi0D-xlGl4140E8EsohxcHLFB68GD4rjewUG3TdEZC9ECCoK0IZB4ErgGHdYZDeEUH-EZCaFwB4GFoeqFioBUTyykF3RUAYTHbT4ZDsBXpUHcGbG3SHR3GBHlCYZAkbFW4jFLFsGbGV6TE7FRHFTf7oEb50BIHJEQHd4wC54l4RjfE0DgkPHnEeKXG56ZCJA4CKQByIEFghxZwzARgCwfQzHii0A-HcLrDNHrDezUBJD-wiEC7JozgAn1ZqqV6klBGLGsETFZFrHQkIkR58EolvHmL-63QclZARgLHkn6EL7mBUkoR9xwAmlpoiFviibEwiEt5t6KyoLQC0CSHrEqnB5lyWHKEByF6QAcwXC94FFuE6GvQNEhxRqYH5EiHWHom-HRklHVh8nViMpBA5BkEZFXB_ECDKGZaG4sKpkyHxAMhPHVElbtHyS0FDYvFtE_y0HV5jEKlok6m0DLSnH0GoBJBLCsK5hJkv5GnfzILjE8EjYiLKAq6SD26O7Pya72wMCtGol2EgnpncYQAIpQ5Ig5nrCXFcb9BrndBwwIx-rsA7mrmIqFSYztD36bEEwHknl7kfBRFojILnlFSVlmDNE6zjkp7TmKIQoOwgDx5oAulILdDwkTGspOGilqoxlIgjamLp5jh6ACAgWjG1krFTGzEHR6lFGylQlgU8HKGwVMgdkTR3QimSkFASmOYpDSmFH3G4Vum0GEXl7TofFXBEl-IEBQlZkSn4WbEymQmMUEXcxIiV7TrdnoDsUZnsBZnKENANnDnvnwXeQx79GDmDGHGPz-y4JXCyR644B6UZC5TRCxByXymKWoA6zrTbCuBpD_ggoznKIgCsr8AcRHj8BXD8A_DFjVAZDmj6yMggC9L8ABH5DUAeXsD8DVQ4DRXVRLTrD8DlAzEQAzA4oRX8CXQ_TESwDQgnwsTHAVoMKJC5h5CUXGIWjeV_CljxXVj8BRBoDpUqDhgaBwA1UWCJUVp0CYCZQQDwARWZaJWnD4SNX3qHQ4BJg4CHRtU1j8CG4jWdSTUxXTXtWCCaiNXIS6TLWRWrVmiWiRDrVZAoj8C8nvmflVW4C6CQApD2XUCOWQolQgC0A-hZAeVeWYXmjlXmizAzD8DyAKAPJAA`} mdxType=\"Playground\">\n  {() => <PostList list={PostFactory.make(2)} mdxType=\"PostList\" />}\n    </Playground>\n    <h2 {...{\n      \"id\": \"the-test-problem\"\n    }}>{`The test problem`}</h2>\n    <p>{`So, for a very basic test, we can use the snapshot to make sure the UI won't change:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostList.spec.jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostList from './path/to/PostList';\nimport PostFactory from './path/to/PostFactory';\n\ndescribe('The PostList component', () => {\n  it('should match the snapshot', () => {\n    const list = PostFactory.make(2);\n    const component = shallow(<PostList list={list} />);\n\n    expect(component).toMatchSnapshot();\n  });\n});\n`}</code></pre>\n    <p>{`On the first run, you might get something like:`}</p>\n    <EchoJS mdxType=\"EchoJS\">{() => 'PASS  ./path/to/PostList.spec.jsx\\n  The PostList component\\n    ✓ should match the snapshot (8ms)\\n\\n - 1 snapshot written.\\nSnapshot Summary\\n - 1 snapshot written in 1 test suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   1 added, 1 total\\nTime:        1.498s, estimated 4s\\n'}</EchoJS>\n    <p>{`But if you run it again, you'll probably see a big fat error:`}</p>\n    <EchoJS mdxType=\"EchoJS\">{() => 'FAIL  ./path/to/PostList.spec.jsx\\n  The PostList component\\n    ✕ should match the snapshot (18ms)\\n\\n  ● The PostList component › should match the snapshot\\n\\n    expect(value).toMatchSnapshot()\\n    \\n    Received value does not match stored snapshot\\n\\n › 1 snapshot test failed.\\nSnapshot Summary\\n › 1 snapshot test failed in 1 test suite. Inspect your code changes or press `u` to update them.\\n\\nTest Suites: 1 failed, 1 total\\nTests:       1 failed, 1 total\\nSnapshots:   1 failed, 1 total\\nTime:        4.97s'}</EchoJS>\n    <h2 {...{\n      \"id\": \"the-solution\"\n    }}>{`The solution`}</h2>\n    <p>{`So, since we have random data being generated at every test run, our snapshots will never be the same. To fix\nthis, we need the randomness of the data `}<strong parentName=\"p\">{`not`}</strong>{` to be so random. To achieve this, we can pass a `}<inlineCode parentName=\"p\">{`seed`}</inlineCode>{`\nwhich will be used to generate the random data. By using the `}<a parentName=\"p\" {...{\n        \"href\": \"/api/seed\"\n      }}><inlineCode parentName=\"a\">{`seed`}</inlineCode>{` method`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostList.spec.jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostList from './path/to/PostList';\nimport PostFactory from './path/to/PostFactory';\n\ndescribe('The PostList component', () => {\n  it('should match the snapshot', () => {\n    // Add the seed method before calling make\n    const list = PostFactory.seed(123).make(2);\n    const component = shallow(<PostList list={list} />);\n\n    expect(component).toMatchSnapshot();\n  });\n});\n`}</code></pre>\n    <p>{`With this in place, we now get the same result every time!`}</p>\n    <EchoJS mdxType=\"EchoJS\">{() => 'PASS  ./path/to/PostList.spec.jsx\\n  The PostList component\\n    ✓ should match the snapshot (5ms)\\n\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   1 passed, 1 total\\nTime:        1.367s'}</EchoJS>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","export const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n","import faker from 'faker';\nimport { isObject } from './helpers';\nimport { FactoryGenerator, IDataObject, IFactoryObject } from './types';\n\nexport * from './types';\n\nexport const resolveArgs = (...args: any[]): IDataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n\nexport const merge = (data: IDataObject, overrides: IDataObject): IDataObject => {\n  return Object.keys(data).reduce((values, key) => {\n    if (!overrides[key]) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const factory = (generator: FactoryGenerator): IFactoryObject => {\n  const create = (overrides: IDataObject = {}): IDataObject => {\n    const data = generator(faker);\n\n    return merge(data, overrides);\n  };\n\n  const make = (count: number | IDataObject = 1, overrides?: IDataObject): IDataObject[] => {\n    const { data, length } = resolveArgs(count, overrides);\n\n    return Array.from({ length }).map(() => create(data));\n  };\n\n  const only = (keys: string | string[], overrides: IDataObject = {}): IDataObject => {\n    const data = create(overrides);\n\n    return Array.isArray(keys)\n      ? keys.reduce((filtered: IDataObject, key) => ({ ...filtered, [key]: data[key] }), {})\n      : { [keys]: data[keys] };\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const factoryObject: IFactoryObject = { create, make, only, seed };\n\n  return factoryObject;\n};\n"],"sourceRoot":""}