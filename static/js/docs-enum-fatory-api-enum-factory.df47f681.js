(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{"./docs/enum-fatory-api/enumFactory.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return b});var a=n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o=n("./node_modules/docz/dist/index.esm.js"),c={},i="wrapper";function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(i,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"enumfactoryt"},Object(r.b)("inlineCode",{parentName:"h1"},"enumFactory<T>")),Object(r.b)("h2",{id:"description"},"Description"),Object(r.b)("p",null,"You should create a enumFactory object for the data you want to generate, you need to specify the type of data. To do this, the\nenumFactory class makes use of the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/marak/Faker.js/"}),"Faker.js")," package which provides an easy way to generate random data."),Object(r.b)("h2",{id:"type"},"Type"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type enumFactory = (generator: T[] | (fake: Faker) => T) => EnumFactory<T>;\n")),Object(r.b)("h3",{id:"args"},"args"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"generator (T[] | (fake: Faker) => T)"),": Enum array or generator functions which describes your generated elements. Generator function receives a ",Object(r.b)("inlineCode",{parentName:"li"},"faker")," instance as an argument.")),Object(r.b)("h3",{id:"return"},"return"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Enum factory object "),Object(r.b)(o.b,{to:"/types#enumfactory",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"(EnumFactory<T>)")),": The enumFactory object contains three methods: ",Object(r.b)(o.b,{to:"/enum-factory-api/get",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"get")),", ",Object(r.b)(o.b,{to:"/enum-factory-api/unique",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"unique"))," and ",Object(r.b)(o.b,{to:"/enum-factory-api/seed",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"seed")),".")),Object(r.b)("hr",{style:{marginTop:"2rem",marginBottom:"2rem",opacity:"0.2"}}),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"import { enumFactory } from 'node-factory';\n\nexport type STATUS = ['PENDING', 'CREATED', 'DELETED', 'CANCELLED', 'COMPLETE']\n\nexport const StateFactory = enumFactory<string>(STATUS);\n")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"import { enumFactory } from 'node-factory';\n\nexport const NameFactory = enumFactory<string>((fake: Faker.FakerStatic) => faker.name.firstName());\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/enum-fatory-api/enumFactory.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-enum-fatory-api-enum-factory.c6b1dba63bb8bd7d77fc.js.map