(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{"./docs/api/factory.mdx":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return b});var n=a("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),r=a("./node_modules/docz/dist/index.esm.js"),i={},c="wrapper";function b(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(o.b)(c,Object.assign({},i,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"factorygenerator"},Object(o.b)("inlineCode",{parentName:"h1"},"factory(generator)")),Object(o.b)("h3",{id:"args"},"args"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"generator "),Object(o.b)(r.b,{to:"/api/types#factorygenerator",mdxType:"Link"},Object(o.b)("inlineCode",{parentName:"li"},"(FactoryGenerator)")),": Generator function which describes your data object. This function receives a ",Object(o.b)("inlineCode",{parentName:"li"},"faker")," instance as an argument")),Object(o.b)("h3",{id:"return"},"return"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Factory object "),Object(o.b)(r.b,{to:"/api/types#ifactoryobject",mdxType:"Link"},Object(o.b)("inlineCode",{parentName:"li"},"(IFactoryObject)")),": The factory object contains four methods: ",Object(o.b)(r.b,{to:"/api/create",mdxType:"Link"},Object(o.b)("inlineCode",{parentName:"li"},"create")),", ",Object(o.b)(r.b,{to:"/api/only",mdxType:"Link"},Object(o.b)("inlineCode",{parentName:"li"},"only")),", ",Object(o.b)(r.b,{to:"/api/make",mdxType:"Link"},Object(o.b)("inlineCode",{parentName:"li"},"make"))," and ",Object(o.b)(r.b,{to:"/api/seed",mdxType:"Link"},Object(o.b)("inlineCode",{parentName:"li"},"seed")))),Object(o.b)("hr",{style:{marginTop:"2rem",marginBottom:"2rem",opacity:"0.2"}}),Object(o.b)("h2",{id:"description"},"Description"),Object(o.b)("p",null,"You should create a factory object for the data you want to generate. To do that, you need to specify the type of data. To do this, the\nfactory class makes use of the ",Object(o.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/marak/Faker.js/"}),"Faker.js")," package which provides an easy way to generate random data."),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { factory } from 'node-factory';\n\nconst UserFactory = factory(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n\nexport default UserFactory;\n")))}b&&b===Object(b)&&Object.isExtensible(b)&&Object.defineProperty(b,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/api/factory.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-api-factory.8ab743f15139bf80be02.js.map