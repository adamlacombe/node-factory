{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/api/make.mdx","/Users/olavo/Projects/node-factory/docs/components/Factory.ts","/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","to","parse","UserFactory","make","id","isMDXComponent","factory","fake","random","uuid","name","findName","email","internet","json","styles","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","isObject","variable","constructor","Object","resolveArgs","args","reduce","resolved","arg","length","data","merge","overrides","keys","values","override","rest","generator","create","faker","factoryObject","count","Array","from","map","only","isArray","filtered","seed","value"],"mappings":"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","file":"static/js/docs-api-make.5d047a6e.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'docz';\nimport FormatJson from '../components/FormatJson';\nimport { UserFactory } from '../components/Factory';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"factorymakecount-overrides\"\n    }}><inlineCode parentName=\"h1\">{`Factory.make([count, overrides])`}</inlineCode></h1>\n    <h3 {...{\n      \"id\": \"args\"\n    }}>{`args`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`count `}</inlineCode>{`\u001d`}<span><inlineCode parentName=\"li\">{`(Number [optional])`}</inlineCode></span>{`: This argument defines how many objects should be generated `}<inlineCode parentName=\"li\">{`(default: 1)`}</inlineCode></li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`overrides `}</inlineCode><Link to=\"/api/types#idataobject\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`(IDataObject [optional])`}</inlineCode></Link>{`: These are value which should be overridden on the generated data `}<inlineCode parentName=\"li\">{`(default: {})`}</inlineCode></li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If an object is passed in as the first argument, it will be used to override the values and the count will be set to 1.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`return`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data `}</inlineCode><Link to=\"/api/types#idataobject\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`(IDataObject[])`}</inlineCode></Link>{`: Array containing data objects generated by your generator function`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This method is used to generate many data objects at once.`}</p>\n    <h2 {...{\n      \"id\": \"example\"\n    }}>{`Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.make()\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make()} mdxType=\"FormatJson\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.make({ id: '123' })\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make({\n      id: '123'\n    })} mdxType=\"FormatJson\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.make(2)\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make(2)} mdxType=\"FormatJson\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.make(2, { id: '123' })\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make(2, {\n      id: '123'\n    })} mdxType=\"FormatJson\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","// tslint:disable\nimport { factory } from '../../src/index';\n\nexport const UserFactory = factory(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n","// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","export const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n","import faker from 'faker';\nimport { isObject } from './helpers';\nimport { FactoryGenerator, IDataObject, IFactoryObject } from './types';\n\nexport * from './types';\n\nexport const resolveArgs = (...args: any[]): IDataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n\nexport const merge = (data: IDataObject, overrides: IDataObject): IDataObject => {\n  return Object.keys(data).reduce((values, key) => {\n    if (!overrides[key]) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const factory = (generator: FactoryGenerator): IFactoryObject => {\n  const create = (overrides: IDataObject = {}): IDataObject => {\n    const data = generator(faker);\n\n    return merge(data, overrides);\n  };\n\n  const make = (count: number | IDataObject = 1, overrides?: IDataObject): IDataObject[] => {\n    const { data, length } = resolveArgs(count, overrides);\n\n    return Array.from({ length }).map(() => create(data));\n  };\n\n  const only = (keys: string | string[], overrides: IDataObject = {}): IDataObject => {\n    const data = create(overrides);\n\n    return Array.isArray(keys)\n      ? keys.reduce((filtered: IDataObject, key) => ({ ...filtered, [key]: data[key] }), {})\n      : { [keys]: data[keys] };\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const factoryObject: IFactoryObject = { create, make, only, seed };\n\n  return factoryObject;\n};\n"],"sourceRoot":""}