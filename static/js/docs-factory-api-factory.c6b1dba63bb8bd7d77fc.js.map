{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/factory-api/factory.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","to","style","marginTop","marginBottom","opacity","isMDXComponent"],"mappings":"2XAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,cACL,0BAAYC,WAAW,MAAvB,kBACH,iBAAQ,CACN,GAAM,eADR,eAGA,oLAC6B,+BAAGA,WAAW,KAAQ,CAC/C,KAAQ,uCADiB,YAD7B,gEAIA,iBAAQ,CACN,GAAM,QADR,QAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uEAIL,iBAAQ,CACN,GAAM,QADR,QAGA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,cAAuD,YAAC,IAAD,CAAMC,GAAG,0BAA0BF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,uBAA7H,mFAAuR,0BAAYA,WAAW,MAAvB,SAAvR,6BAEF,iBAAQ,CACN,GAAM,UADR,UAGA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,mBAA4D,YAAC,IAAD,CAAMC,GAAG,iBAAiBF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,oBAAzH,gDAA6O,YAAC,IAAD,CAAMC,GAAG,cAAcF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,WAAnR,KAAmV,YAAC,IAAD,CAAMC,GAAG,YAAYF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,SAAvX,KAAqb,YAAC,IAAD,CAAMC,GAAG,YAAYF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,SAAzd,KAAuhB,YAAC,IAAD,CAAMC,GAAG,YAAYF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,SAA3jB,KAAynB,YAAC,IAAD,CAAMC,GAAG,aAAaF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,UAA9pB,KAA6tB,YAAC,IAAD,CAAMC,GAAG,iBAAiBF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,aAAtwB,QAA20B,YAAC,IAAD,CAAMC,GAAG,kBAAkBF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,gBAEv3B,kBAAIE,MAAO,CACTC,UAAW,OACXC,aAAc,OACdC,QAAS,SAEX,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,YADR,YAGA,qEAAoD,0BAAYL,WAAW,KAAvB,QAApD,QAA6G,0BAAYA,WAAW,KAAvB,UAA7G,mBAAmL,0BAAYA,WAAW,KAAvB,OAAnL,KACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,+PAaL,iBAAQ,CACN,GAAM,UADR,UAGA,kEAAiD,0BAAYA,WAAW,KAAvB,QAAjD,QAA0G,0BAAYA,WAAW,KAAvB,UAA1G,mCACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qTAiBL,iBAAQ,CACN,GAAM,eADR,eAGA,6HACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0lB,kLAoCTJ,EAAWU,gBAAiB","file":"static/js/docs-factory-api-factory.2fa0d921.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'docz';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"factoryt-s\"\n    }}><inlineCode parentName=\"h1\">{`factory<T, S>`}</inlineCode></h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`You should create a factory object for the data you want to generate, you need to specify the type of data. To do this, the\nfactory class makes use of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/marak/Faker.js/\"\n      }}>{`Faker.js`}</a>{` package which provides an easy way to generate random data.`}</p>\n    <h2 {...{\n      \"id\": \"type\"\n    }}>{`Type`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type factory = (generator: (fake: Faker) => T) => Factory<T, S>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"args\"\n    }}>{`args`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`generator `}</inlineCode><Link to=\"/types#factorygenerator\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`(FactoryGenerator)`}</inlineCode></Link>{`: Generator function which describes your data object. This function receives a `}<inlineCode parentName=\"li\">{`faker`}</inlineCode>{` instance as an argument`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`return`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Factory object `}</inlineCode><Link to=\"/types#factory\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`(Factory<T, S>)`}</inlineCode></Link>{`: The factory object contains seven methods: `}<Link to=\"/api/create\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`create`}</inlineCode></Link>{`, `}<Link to=\"/api/only\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`only`}</inlineCode></Link>{`, `}<Link to=\"/api/make\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`make`}</inlineCode></Link>{`, `}<Link to=\"/api/seed\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`seed`}</inlineCode></Link>{`, `}<Link to=\"/api/state\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`state`}</inlineCode></Link>{`, `}<Link to=\"/api/on-insert\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`onInsert`}</inlineCode></Link>{` and `}<Link to=\"/api/on-hydrate\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`onHydrate`}</inlineCode></Link></li>\n    </ul>\n    <hr style={{\n      marginTop: '2rem',\n      marginBottom: '2rem',\n      opacity: '0.2'\n    }} />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <h3 {...{\n      \"id\": \"no-types\"\n    }}>{`No types`}</h3>\n    <p>{`If no types are defined, the return types of `}<inlineCode parentName=\"p\">{`make`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` will be set to `}<inlineCode parentName=\"p\">{`any`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { factory } from 'node-factory';\n\n// UserFactory.make() => any\nconst UserFactory = factory((fake: Faker) => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n\nexport default UserFactory;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"typing\"\n    }}>{`Typing`}</h3>\n    <p>{`If a type is defined, the return types of `}<inlineCode parentName=\"p\">{`make`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` will be set to the given type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { factory } from 'node-factory';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\n// UserFactory.make() => User\nexport const UserFactory = factory<User>(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"with-states\"\n    }}>{`With states`}</h3>\n    <p>{`If you need to create states, you can declare the state's types and pass it to the factory function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { factory } from 'node-factory';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface UserStates {\n  female: StateGenerator<User>;\n  male: StateGenerator<User>;\n}\n\n// UserFactory.make() => User\nexport const UserFactory = factory<User, UserStates>(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n\n// UserFactory.female() => User\nUserFactory.state('female', {\n  name: 'Joan Doe',\n});\n\n// UserFactory.male() => User\nUserFactory.state('male', {\n  name: 'John Doe',\n});\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}