{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/docs/examples/snapshot-testing/PostList.tsx","/Users/olavo/Projects/node-factory/docs/examples/snapshot-testing/PostFactory.ts","/Users/olavo/Projects/node-factory/docs/components/EchoJS.tsx","/Users/olavo/Projects/node-factory/docs/examples/snapshot-testing/snapshot-testing.mdx","/Users/olavo/Projects/node-factory/src/enumFactory.ts","/Users/olavo/Projects/node-factory/src/constants.ts","/Users/olavo/Projects/node-factory/src/factory.ts","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["json","styles","parse","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","PostList","list","map","post","id","href","title","PostFactory","factory","fake","random","uuid","lorem","sentence","children","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","FormatJson","create","__position","__code","__scope","this","Link","Playground","EchoJS","__codesandbox","make","isMDXComponent","enumFactory","array","generator","n","isFunction","Array","from","length","faker","enumFactoryObject","seed","value","get","mock","data","rand","helpers","shuffle","slice","unique","N","isArray","partial","pop","DEFAULT_DATABASE_CONFIG","insert","hydrate","database","generate","overrides","merge","count","resolveArgs","model","factoryObject","a","Boolean","Promise","all","only","keys","overrideData","reduce","filtered","state","name","stateValues","indexOf","stateData","onInsert","func","onHydrate","isObject","variable","constructor","Object","toString","call","values","override","rest","args","resolved","arg"],"mappings":"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","file":"static/js/docs-examples-snapshot-testing-snapshot-testing.28a3fad5.js","sourcesContent":["// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","import React from 'react';\n\nconst PostList = ({ list }) => (\n  <>\n    <h2>Posts</h2>\n    <ul>\n      {list.map(post => (\n        <li key={post.id}>\n          <a href={`/posts/${post.id}`}>{post.title}</a>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nexport default PostList;\n","import { factory } from '../../../src/index';\n\nconst PostFactory = factory(fake => ({\n  id: fake.random.uuid(),\n  title: fake.lorem.sentence(),\n}));\n\nexport default PostFactory;\n","// tslint:disable\nimport React from 'react';\n\nexport default ({ children }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '25px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }}>\n  {children()}\n  </pre>\n);\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link, Playground } from 'docz';\nimport PostList from './PostList';\nimport PostFactory from './PostFactory';\nimport EchoJS from '../../components/EchoJS';\nimport FormatJson from '../../components/FormatJson';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"snapshot-testing\"\n    }}>{`Snapshot testing`}</h1>\n    <p>{`When working with component libraries, such as `}<a parentName=\"p\" {...{\n        \"href\": \"http://reactjs.org/\"\n      }}>{`React.js`}</a>{`, a common pattern of\ntesting is using `}<a parentName=\"p\" {...{\n        \"href\": \"https://jestjs.io/docs/en/snapshot-testing\"\n      }}>{`snapshots`}</a>{`. These are particularly\nuseful to make sure your UI does not change unexpectedly. But, because of this, using random data\nto test snapshots creates a problems since, because the data changes, the snapshots will also\nchange. Let's see how we can deal with this.`}</p>\n    <p>{`For the sake of this example, let's say we are testing a blog app.`}</p>\n    <h2 {...{\n      \"id\": \"factory\"\n    }}>{`Factory`}</h2>\n    <p>{`To start, we might have a factory in the likes of:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostFactory.js\nimport { factory } from 'node-factory';\n\nconst PostFactory = factory(fake => ({\n  id: fake.random.uuid(),\n  title: fake.lorem.sentence(),\n}));\n\nexport default PostFactory;\n`}</code></pre>\n    <FormatJson parse={() => PostFactory.create()} mdxType=\"FormatJson\" />\n    <h2 {...{\n      \"id\": \"component\"\n    }}>{`Component`}</h2>\n    <p>{`So let's say we have a component which lists the blog posts:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostList.jsx\nimport React from 'react';\n\nconst PostList = ({ list }) => (\n  <>\n    <h2>Posts</h2>\n    <ul>\n      {list.map(post => (\n        <li key={post.id}>\n          <a href={\\`#/posts/\\${post.id}\\`}>{post.title}</a>\n        </li>\n      ))}\n    </ul>\n  </>\n);\n\nexport default PostList;\n`}</code></pre>\n    <Playground __position={1} __code={'() => <PostList list={PostFactory.make(2)} />'} __scope={{\n      props: this ? this.props : props,\n      Link,\n      Playground,\n      PostList,\n      PostFactory,\n      EchoJS,\n      FormatJson\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AAGTQbYlgABSgVxEhSIRQgwdh5FdY12gPAAvP1-TtKYEMoFFYJRHDZXaD0DzgT0sG9Ml4EkOBUFmOBhgtWgUQKSQyIo2wXxVVBiPVdhBIIAAxM0hWSI0aLo04GJ_FiGPYzjuPNXiYhnATyJkuSBESIiIPYM9yGGAApZxqPdaQVIBdN9AYyybOcMySPYaShSiAhrLgZlFIc-jnPXGgGN8gR_MC6gvIkwNJXs-UzXaMFUF0KiCOcAhEixdhuHYYB1iiARnlQK52gABnYJMZiwdo92rGYOxYGcqoAFga9gADYGqa9YwGA2SiGgRIqv4ZxDgRB1MEkoR-CWIhqHI1qEUG6thpoZwIHwy52AARk65r5AyrKpgAQTmQr2AjKCrOgdAwywjlCrEO7oxkdgUXymBuGAHK8qxeQtxrYBHqgZ7ggAMhh8ZEnmShmkh6HzG4DG5TADDJQGVB2nYAB-DYnrDCM3quVGwzO6spBkKs3zMGEJMwMAwigKZyfe2trvrYAue4D7GCkyipigYSAak2TJXknAom2GAIwAJg5bDN3kKRearL8QDCtSsTYji7m03T-JF4ScAIOAsEA3QQIMMDxPtJKpTdVLFVEswLskwzRdu-72HFqj5DewXPtpsGEzwJWxCkuAKxjldGFCKBI_BoOCDl2YI0FKiw6jasaxrRhxfYBXEgB3PM64UGVyLhNXF8LowAB4pJCrhiABJgCrnAa-KUGe8My2XlgDXJFcNOi6kcWp_YDlVaTyQU7BqQGc950sG81n2dI33hNEnW9aY38NKNriRB0-A9JSAyUWliITMtrQKGA_QGCdyDDWM5JsJC2iPQ4EAR6OAAhyCSFUNgP0XtqBUSlj_W6bMZYmQjGzBW3N7rrC4FcNBf5MgYEiDgUIoQuDk2ahYGIBBYA4NcArHAUAhQwCIDgOA-h4SKw5KdBeG9mb2h3inPe98f6HyULrJynwIpW0kO5Sgtln4220Hbd-YFHjjDgOLGgiAWAVA8LAW0iVNQpVNB7DKvCpj8I5ndB6NgoYvRDhg6M_Zui_VgADEqhd2AeAlNsNCbQMBVQAMRnjPNJQ60kACsm0i5eAEFOaCMAwAECquEnqQVxY5ACfYM8WpOpajPFEmsVAGFljlAEgA7FqAAHAATmqfYApFgyoVSqkrFJPhaqtJ6krAa5CaytU7AUFp1Uekrm2gQXKf0qovHiLEBphpgK7X2lVQ6lSRkeKiFgAA6lwCYyzqrVQAKRzMoKwDIYAGEjAAJpVTCBEAp8ha7VghjYtG5MabbicevMwR9xGOmoK5SQ0VYpBVQPI22b9QIgFUVbDRSTtGuF0YyMS5kXZGM1NA1A2NMrdnMHARINBXBYAABIQBSHgcWZKCARk0NQN67iLDexcfAW69KayoFCEQQIJT2hFKFFcAJSZOrVOqlqepvSLDlyqrykpATer2GvErM8145komnCkKVlBin8sFcK0VcyvCavFJVOU0r-W9SVoda8Ky5nsoSBqrV7AglJkFUraS9yN4WAgM0CMeUkbNBpeYAAhEVdoqqCivmKnXCwAbbq2R1AAORYaiAoXrEjUpBUsDCrM0DZCWCrUSFh3nsBjUVANoYYBkglIrSQMMnhLHaDDZiSpXzlsrQiCMkgpApHrTDDmzaOStuQu2zcda5QwxSAQftBaJyjj6OYMtXQ23VqjCAKMvB12hAANquHNPhS65oABa1VzTVIALrAE6vIAAPuu9dm6AB6oRT1Xofbe9dIBT0clMKu9dcAjCckJje3gHgfVohgFetmUBWFXttVALkwGr3mkJuu9AABqCMhNEDrpwChowHJCYYcQJumAZ5T2btQ-u80p7kO8DQ_hjko6sW42ZBGfyVk6VRtYK4I45AoO3XaOyzlGQ_T104N6yQ97-CSEttfVj0R2McY8aJr1d1JCIE7tJ3ScmCAKcjUp0ThS-MhvLiJgzhboRQe6KyszRdeN2BDWGmcpmzNFqLthecrCxOqdRAyCD8RWGadk2xvAC89M2Z6EZuUBryT42nW5iznmVMdtg4FlE2ndPWYM3Z_jsHnM1lczWLoBA51ykYHAVquLgb_X4ATVDP0qtwE3XZ097A6vpRAGIWr7BgutdK2xCrnXp0h1EjTJmW8WYJN3lYvs3HPP2Pzo4ro9W_puJXF4nYvis2BOCaEiJ-qhRxISUkuUbSfqaq4I6rJOS8lzNNaUipNS6lzKaWgKq5okzDPaewTpPhumNXFTNgZHU5RK0-3MsZEzqFymmeLcg4OFl7QOu0FZayi4bO2egXZcpDr7KOQDk5ZyLnXLlLcyg9zsLoHcGkdC6jEjOFHA0VAzoBBEssHqaCbj2AAH0ueEBIFcPFBLiWkvJSLqlrUBCsPJm9B57BNxmA_N80RoDwGQNwFbcFehIVmPYEYFKHpfXwD9DrqCFipj-G_sg3--vJBIMfqZUSJvjiTYESEOwdAOUP3klhG3HuiBe5Mn6HWKvJCG7gM_TX9tDCSDUbCrRtgEVQ4wl6iA2RzT5BSBxYrXQ4Bje8mgWgAgkHdAaFqaIrgdQeHUFsSC6xN2Svq2q09VwkQjdMeN-0BezlVvYLlLIABxdImRH6MEsB9Vl5MriWGnRGAnAh-jlCuKX8vlfq-Sg5FPmfVAMLHcE1yjfVhN2nq3343fHKuVLDnwv-AS-y8EAr1XmvB_LBH7b5vfPegi894QjKakg_mfRBCij7j7rCT4LSRDUjAEz5X5cA36NB34P5r4EAH4_4QGsJQGgHb6aLsB74ZAoG_7oEv6npiAn475XC4ECCX6nLz6wH3DwEr6P7r5XCoFjSEFH4kFmCjbv4SRd5f6zQNAB6JCr416j63RIggHVjywHR960D_4ZCAECAYHVjkCmi0DMEEEwByHD5AFj7TrUBJBXARjlx0HlzIxWDsBXrsCXTz4oSMCmHNBj5UEZDX5wCYb0H37CHr7cwITcYxDxBKEWCsLZCGFcZQAMjkHn54HcwCE_yeEEABH1ZZCGEcRHgC7JozhLAohZAABq8QDIdBy-HhjByB3MrAlAXA06ugkAKQCBXiUulAMwOKdBtRFIjgmKpKwBB-ZRFRnB7eH-hexe7AWhsQZ4WAIE-Q1AwBYW7Am6WRahjeBQzeve9-shQ-ChShXBOuhuPkP8WhCh_suCLeqAiQocH0hRiBNePCHeY4n-gxLRrCbR1RUxrKaArCwohhlO9-U-px4BrBMAjA4h06eAiQz0SRd0nxrg3x3hGhAJxxHBqAmx1xnAtxPeZ4gmg-8RY-0xYB0-mBp-ERQmAgz-r-vR_o3BneKJs0aJHKAAqmJAAI4MjPGgHP6kHYEUHEnH6kl548GUndDUn-4_zMnVinhXACkYkJHJ6MkHQCl0kQDSkJFBEPihEMhuEclimCaCEbFK7KAh526ywa6KIQoOzgTeS4JHD_zmkJT2hQRHjlQwBLA56aqnLWEpB2B_xuweibBQCwhwDWm17Vj3EwCPGkq9KCF7GPy9LDHkCjHjF4y9LnFxEJmCFJnrAyGaFrGRmcE25h4Yrez6kmS3Sj5LCXS3TRmxl0ATGoDAENhpAAGPxXDhmZlCg_GsrewQl1EHRBkhkpBTFFSZb-D4rkDIlvFUoQlQmZYWBFYlYQlxZYQA6DmZS-AgnD6KzjlWCKaibTkCDmCzkrhKDrDyAeqFioBUR1nyG0D-wwGL7uEXHJSWFIhH4WE4EpxQC3Swatkrjtnl63TnnaECCoK0J4HHmererXnMoYxFQfnTFFzbnmB2lpARgQklk2GJB9xwDWGZBpoQlvTExPlXDAD2IW64keJcGwWzo7ndYZCIXIV7DUEuFvTEVDbHnexSH-xYEEBqmRFHCWGJnFFOE0HlBuF8VIGfkeKwDNinDbBT7PlEFzlJYcWFSYxZoJI5roCbn1wrQ7C_mZkcJu5WBznuaWZeYRiKWMBHQaVo5SW3Sbp_lZDkwtbEUkmkUJbdBJaG5mGKWQVyiUDFERqTndbWVFR2W0CmWn6MV2AkXxYeZWZRreym7l5LCwAzgFjYRFROlQAunlRwBhU74CUMVzmNJBVWGoU4CKQBzJUTp4ghxZwzARgCwfQhVrnl6hZOVcmkUZRFzmksJBAPjdX4JWg4AUHS4gUzrZ7wVSXMWdUnlUQqHiiXlFSLnDm5U0BcWEnPkiU175W0HCUIFxFiVFwSWBU7AyWWFyUrgKWn7sDBovkJDsBwyFg761gWUwU1haW7BFS2W6UOX6XnUuUxUmWBrXjCAxYrXIGWVvXFVNVcxMX7muUmUeUoxXXeXtC-VIH-VRrvU6X1mKwcURUGVw0A0BXxXHCJWBx0BVU-7pXwDOkwCuk5UcXbXlCK76ZY1FSYUoRlUygVUU2pUDpRB1UNUjg41IUtX41_VubTUWDdVKmAUKwCChiVCELDXcJS0mUc1oW2Aa2sZSWhYBVwUhAjCuDjgsHUg4DxBQAFxmbvW1URhLV3QrSYBQBQlhwBVFyuBG3jgdkUh9ynkZBUqO3zgs3hYG3e2sL4Arn2WB1waFX5acJRrB35Zq0e3G3mLl6dm-2jk607CJ1TkUW7np0-3AmgmhXvWJ1HnTXez6HJBFRGEwCJAmH11mGWDPka12FN0OFiBM1wGbXJT9nzYSG2awJp3363RSGz70W0Es0rgG0Rga3oXa3GFviibEzGHlroChDtqoLQCF7BGSS-EQD-GOFlz10_EBxAJlU70XCLAzHlxLGi2j0W4-HCiH1QCdH1710tYhxLCEXL31wEW3311wD30Qn6XP1-Fv1j4cgf0N1f343gOv0JEV1kkMrD0_S9X-wqkHQcncyZYy29URhYO51jUlYFlCHFFTUoMzVTBzHdC10pEHSObdqJG0C5FhE917XFEHU1hJabo8qqEwBNRyhSFCOo2oBJCiNKmSMrGCP1pVGkpBntCnq-1qA6hgARgMNvTmXVQQ2oOnk0MyMRlCjsX4kvnrW8WcNIG3SHTd2uG34MGiW4NRoWBHXvWnWH7tVmaXVPXeUqWQDOjqWvWiZs3C0XmKy0NsP5Hi2x3mYA3eOZjmWHS6OaXFVfUi0RN5HwAciOWRXOUubw3uWIwwCeXI2Yyo1-XJNWXaXBXfVu31wX0ZPsNwAA5mYX2M3ONx2_UxM-5E0dN6NUQJX35JW83VW3QZVZVulg22PEPBPFXz3lVQSVV8220NV9NvVAWYL6atNAKNP5EtM2YX3IVrOFrx1bM1ji15MGZkUGb4PZBy0ZCK0ELMIq3T1nMG3vWx3INRqAVW5xH6VIjQMMP6X2FWEtZFS0NGNHAW7pmQsJGFqHksVoPyM1GF2ea10NFNHMEH3-HdnUBPFj5iDcMWBxE4DGEP0IoUgDrDQCBngSh4D1UN5MNEs8Peqz6NF4x2AW4AswOfpBM1jkudn_PHHQN31XnsuwJCsnE8ufP7nl2Iv6OW725_P9k9ACPLRAWX7iOJCZG9WZEyNLDItBlYTHkG1kN_MW4xG_PFFTHwyXQjZXHbwu6WJkMiK6lgKeiak_wR5Gla4mmfzfzy0pRWmiT-tQQCmCE-7_wG5FN-kbzex-4RtFSiGLVwl22oVHGJBH7cPeynj-yoBrX75OPiWjjHXSUhDHHPmPmeMst3TozKXhj-PZDJMhPdXem-kdMsJ4ChBgDnL_Fj4RiboX3cZYWfoduCh1XENGWJbermCJPNvFWtvzjttnOdvdu9vAEDtDuoWjsrvqKxCKzVRLBJOGXw0BUhPzPc2LMjPkGvQrOnEdOLs-kZC55nMWCrs9uwAbuDtALDsoQ7vhY4DjtkIJ2GVq23N9VAUK0DXK3cUjVq3vPWVP3YuQPwmFrytURSkMh5sFtRGu0riuNSUZuVvHGXOgW1tKVFR-NqXzvVMBsPNtvPsdtcRrufv9vfvm3bt_2iaAcNHkwntxMzvPVJN8stuQf4BLuMe7tdsft9sNjse_uJD_sGYsKw4HtHuTuntxVoPxrvnPUKf0IjNEw4HsAt6lVLN4Cx3ewS4QOIJicMeS7vvrtsdbsjszOlu3QXuRA80pV4BXA6c1UC31XMvkXjUzYv3xA8cTufOTtgdiey39VK3POweq1UN52hdY1IfhcoeUPrCMoYO11YM4dElFtFxJZEN8vgeEOZMxceIG0JuxEUMIuV1oP1dWtWMqtKlLCniZoMlYdfPVh1eettc176XhtCm6GcEOsTZsyu6tf26usgAh72fh6Gmvy-sfzmRQS91TAem4TRvzCxt9ESTey2DKt3Rcb9CJ4HQAslckOUUXeH2Ir3XwyI3sAPdXcUc-V-XPdvfcaPewAfDD1ojIKfdxH2tHf2isXUV0Pgnl72NFFIG2Pw93nIHI_KuD3q2lVa2oXktvQPXz3Y9YUT3OFT0Q2h3l4rNYMZtLAN44N4f6YG3lzPXgXh7mdGcs88sme_fsOGXl3rAG0ktks4Xr2b2KxVdNM0-n23dkcRiC9APE-CVZMqPYBqN10nHPU6N8sG11MX1YPNMdM8tXCBqnfFHks8u4Wk336c9XAIXNVW933TP7PIOS2pfUPFSAOKdXDgVLAX0547e3Qs9zl68srsC6-ZPNMe9LHgXGsrgs9jPXyjUG169DY_3DaTcQ9TDezjN03ZX-xbtukZtZto_FHvTrDcZuki_torgRjZ833l_BcI1FNmHl-fcCbcUY1vP53u--802ZW5rk0-emezgfS1TEwt9XCHQx_6ZTtuXeqvct8o1o014d9mba-h9AK19LDrkt_O_1wz98tpcla18yukUA5XuD9HRb9w_FTYQHnVgs06zrTbCuBpD_ggqR7KIgCsr8AMP8BXD8A_Biw1QDIOaH1iMgQAvSfgNQSrJ_92A_AaqDgAQHVQlo6wfgOUBUIQBxW_oJAHAJACll8gv4aECfBYjO4yQlARILmDyAFAZ0Zoc0IAL-ClgUB1YfgFEDQCwD-AauN_kwIsBoCK0dATAJlFTy54cBmWNAacHwjsCQA96Q6DgCTA4BDo3AmsPwHNKSD70nUeQYgMUE8DBAmoSQchF0haDcBxiC0FaD0FZAUQ_AQ8pwWDwMDcAyLN_tQA_6QoSoIAWgD6CyB_8ABAjc0MYPNCzAZg_AeQAoAeRAA`} mdxType=\"Playground\">\n  {() => <PostList list={PostFactory.make(2)} mdxType=\"PostList\" />}\n    </Playground>\n    <h2 {...{\n      \"id\": \"the-test-problem\"\n    }}>{`The test problem`}</h2>\n    <p>{`So, for a very basic test, we can use the snapshot to make sure the UI won't change:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostList.spec.jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostList from './path/to/PostList';\nimport PostFactory from './path/to/PostFactory';\n\ndescribe('The PostList component', () => {\n  it('should match the snapshot', () => {\n    const list = PostFactory.make(2);\n    const component = shallow(<PostList list={list} />);\n\n    expect(component).toMatchSnapshot();\n  });\n});\n`}</code></pre>\n    <p>{`On the first run, you might get something like:`}</p>\n    <EchoJS mdxType=\"EchoJS\">{() => 'PASS  ./path/to/PostList.spec.jsx\\n  The PostList component\\n    ✓ should match the snapshot (8ms)\\n\\n - 1 snapshot written.\\nSnapshot Summary\\n - 1 snapshot written in 1 test suite.\\n\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   1 added, 1 total\\nTime:        1.498s, estimated 4s\\n'}</EchoJS>\n    <p>{`But if you run it again, you'll probably see a big fat error:`}</p>\n    <EchoJS mdxType=\"EchoJS\">{() => 'FAIL  ./path/to/PostList.spec.jsx\\n  The PostList component\\n    ✕ should match the snapshot (18ms)\\n\\n  ● The PostList component › should match the snapshot\\n\\n    expect(value).toMatchSnapshot()\\n    \\n    Received value does not match stored snapshot\\n\\n › 1 snapshot test failed.\\nSnapshot Summary\\n › 1 snapshot test failed in 1 test suite. Inspect your code changes or press `u` to update them.\\n\\nTest Suites: 1 failed, 1 total\\nTests:       1 failed, 1 total\\nSnapshots:   1 failed, 1 total\\nTime:        4.97s'}</EchoJS>\n    <h2 {...{\n      \"id\": \"the-solution\"\n    }}>{`The solution`}</h2>\n    <p>{`So, since we have random data being generated at every test run, our snapshots will never be the same. To fix\nthis, we need the randomness of the data `}<strong parentName=\"p\">{`not`}</strong>{` to be so random. To achieve this, we can pass a `}<inlineCode parentName=\"p\">{`seed`}</inlineCode>{`\nwhich will be used to generate the random data. By using the `}<a parentName=\"p\" {...{\n        \"href\": \"/api/seed\"\n      }}><inlineCode parentName=\"a\">{`seed`}</inlineCode>{` method`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// ./path/to/PostList.spec.jsx\nimport React from 'react';\nimport { shallow } from 'enzyme';\nimport PostList from './path/to/PostList';\nimport PostFactory from './path/to/PostFactory';\n\ndescribe('The PostList component', () => {\n  it('should match the snapshot', () => {\n    // Add the seed method before calling make\n    const list = PostFactory.seed(123).make(2);\n    const component = shallow(<PostList list={list} />);\n\n    expect(component).toMatchSnapshot();\n  });\n});\n`}</code></pre>\n    <p>{`With this in place, we now get the same result every time!`}</p>\n    <EchoJS mdxType=\"EchoJS\">{() => 'PASS  ./path/to/PostList.spec.jsx\\n  The PostList component\\n    ✓ should match the snapshot (5ms)\\n\\nTest Suites: 1 passed, 1 total\\nTests:       1 passed, 1 total\\nSnapshots:   1 passed, 1 total\\nTime:        1.367s'}</EchoJS>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import faker from 'faker';\nimport { isFunction } from './helpers';\nimport { EnumFactory } from './types';\n\nconst enumFactory = <T = any>(array: any[] | ((fake: any) => any)) => {\n  const generator = (n?: number): any[] => {\n    if (isFunction(array) && typeof array === 'function') {\n      return Array.from({ length: n || faker.random.number(10) }).map(() => array(faker));\n    }\n\n    return array as any[];\n  };\n\n  const get = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers.shuffle<T>([...data])[rand];\n    } else if (n < 1) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers\n        .shuffle<T>([...data])\n        .slice(rand, rand + 1);\n    } else {\n      mock = Array.from({ length: n }).map(() => {\n        const data = generator(n);\n        const rand = faker.random.number(data.length - 1);\n        return faker.helpers.shuffle<T>([...data])[rand];\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const unique = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers.shuffle<T>([...data])[rand];\n    } else if (n < 1) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers\n        .shuffle<T>([...data])\n        .slice(rand, rand + 1);\n    } else {\n      const N = !Array.isArray(array) || n < array.length ? n : array.length;\n      const partial = [...generator(N)];\n      mock = Array.from({ length: N }).map(() => {\n        return faker.helpers.shuffle<T>(partial).pop();\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const seed = (value?: number) => {\n    if (value) {\n      faker.seed(value);\n    }\n    return enumFactoryObject;\n  };\n\n  const enumFactoryObject = { seed, get, unique };\n\n  return enumFactoryObject as EnumFactory<T>;\n};\n\nexport default enumFactory;\n","export const DEFAULT_DATABASE_CONFIG = {\n  async insert(data: any) {\n    return data;\n  },\n  hydrate(data: any) {\n    return data;\n  },\n};\n","import faker from 'faker';\nimport { DEFAULT_DATABASE_CONFIG } from './constants';\nimport { isFunction, merge, resolveArgs } from './helpers';\nimport { DatabaseConfig, DataObject, Factory, FactoryGenerator, GenericExtension, MakeMethod } from './types';\n\nconst factory = <T, A = GenericExtension<T>>(generator: FactoryGenerator) => {\n  const database: DatabaseConfig<T> = DEFAULT_DATABASE_CONFIG;\n\n  const generate = (overrides: DataObject | any[] | null = null) => {\n    const data = generator(faker);\n\n    if (overrides === null) {\n      return merge(data, Array.isArray(data) ? [] : {}) as T;\n    }\n\n    return merge(data, overrides) as T;\n  };\n\n  const make = (count?: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n    let mock: T | T[];\n    if (count === undefined) {\n      mock = generate() as T;\n    } else if (count < 1) {\n      mock = [generate()] as T[];\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else if (isFunction(count) && typeof count === 'function') {\n      mock = generate(count(faker)) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return mock.map((model: T) => {\n        return database.hydrate(model);\n      });\n    }\n\n    return database.hydrate(mock);\n  };\n\n  const create = async (count?: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n    let mock: T | T[];\n    if (count != null && count < 1) {\n      mock = [generate()] as T[];\n    } else if (!Boolean(count)) {\n      mock = generate() as T;\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else if (isFunction(count) && typeof count === 'function') {\n      mock = generate(count(faker)) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return await Promise.all(\n        mock.map(async (model: T) => {\n          await database.insert(model);\n          return database.hydrate(model);\n        }),\n      );\n    }\n\n    await database.insert(mock);\n    return database.hydrate(mock);\n  };\n\n  const only = (keys: keyof T | Array<keyof T>, overrides: DataObject | FactoryGenerator = {}) => {\n    const overrideData = isFunction(overrides) && typeof overrides === 'function' ? overrides(faker) : overrides;\n    const data = make(overrideData);\n\n    return (Array.isArray(keys)\n      ? keys.reduce((filtered: Partial<T>, key) => ({ ...filtered, [key]: (data as Partial<T>)[key] }), {})\n      : { [keys]: (data as Partial<T>)[keys] }) as Partial<T>;\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const state = (name: string, stateValues: DataObject | FactoryGenerator) => {\n    if (['create', 'make', 'only', 'seed', 'state', 'onInsert', 'onHydrate'].indexOf(name) < 0) {\n      const stateData = isFunction(stateValues) && typeof stateValues === 'function' ? stateValues(faker) : stateValues;\n      const makeMethod = (count: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n        let mock: T | T[];\n        if (count === undefined) {\n          mock = generate(stateData) as T;\n        } else if (count < 1) {\n          mock = [generate(stateData)] as T[];\n        } else if (typeof count === 'object') {\n          mock = generate({ ...stateData, ...count }) as T;\n        } else if (isFunction(count) && typeof count === 'function') {\n          mock = generate({ ...stateData, ...count(faker) }) as T;\n        } else {\n          const { data, length } = resolveArgs(count, overrides);\n          mock = Array.from({ length }).map(() => generate({ ...stateData, ...data })) as T[];\n        }\n\n        faker.seed(faker.random.number());\n\n        if (Array.isArray(mock)) {\n          return mock.map((model: T) => {\n            return database.hydrate(model);\n          });\n        }\n\n        return database.hydrate(mock);\n      };\n\n      (factoryObject as any)[name as keyof A] = makeMethod as MakeMethod<T>;\n    }\n  };\n\n  const onInsert = (func: (data: T) => Promise<any>) => {\n    database.insert = func;\n\n    return factoryObject;\n  };\n\n  const onHydrate = (func: (data: T) => Promise<any>) => {\n    database.hydrate = func;\n\n    return factoryObject;\n  };\n\n  const factoryObject = { create, make, only, seed, state, onInsert, onHydrate };\n\n  return factoryObject as Factory<T> & A;\n};\n\nexport default factory;\n","import faker from 'faker';\nimport { DataObject } from './types';\n\nexport const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n\nexport const isFunction = (variable: any) => {\n  return variable && {}.toString.call(variable) === '[object Function]';\n};\n\nexport const merge = (data: DataObject, overrides: DataObject): DataObject => {\n  if (Array.isArray(data) && Array.isArray(overrides)) {\n    return data.map((value: any, key: number) => {\n      return key < overrides.length ? overrides[key] : value;\n    });\n  }\n  return Object.keys(data).reduce((values, key) => {\n    if (Object.keys(overrides).indexOf(key) < 0) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const resolveArgs = (...args: any[]): DataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else if (isFunction(arg) && typeof arg === 'function') {\n        return { ...resolved, data: arg(faker) };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n","export * from './types';\nexport { default as factory } from './factory';\nexport { default as enumFactory } from './enumFactory';\n"],"sourceRoot":""}