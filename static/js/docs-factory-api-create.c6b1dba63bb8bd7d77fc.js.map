{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/components/Factory.ts","/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/docs/factory-api/create.mdx","/Users/olavo/Projects/node-factory/src/enumFactory.ts","/Users/olavo/Projects/node-factory/src/constants.ts","/Users/olavo/Projects/node-factory/src/factory.ts","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["UserFactory","factory","fake","id","random","uuid","name","findName","email","internet","state","json","styles","parse","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","to","make","isMDXComponent","enumFactory","array","generator","n","isFunction","Array","from","length","faker","map","enumFactoryObject","seed","value","get","mock","data","rand","helpers","shuffle","slice","unique","N","isArray","partial","pop","DEFAULT_DATABASE_CONFIG","insert","hydrate","database","generate","overrides","merge","count","resolveArgs","model","factoryObject","create","a","Boolean","Promise","all","only","keys","overrideData","reduce","filtered","stateValues","indexOf","stateData","onInsert","func","onHydrate","isObject","variable","constructor","Object","toString","call","values","override","rest","args","resolved","arg"],"mappings":"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","file":"static/js/docs-factory-api-create.f77d927c.js","sourcesContent":["// tslint:disable\nimport { factory, StateGenerator } from '../../src/index';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface UserStates {\n  female: StateGenerator<User>;\n  male: StateGenerator<User>;\n}\n\nexport const UserFactory = factory<User, UserStates>(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n\nUserFactory.state('female', {\n  name: 'Joan Doe',\n});\n\nUserFactory.state('male', {\n  name: 'John Doe',\n});\n","// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'docz';\nimport FormatJson from '../components/FormatJson';\nimport { UserFactory } from '../components/Factory';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"factoryt-screate\"\n    }}><inlineCode parentName=\"h1\">{`Factory<T, S>.create`}</inlineCode></h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <span>This method is used to generate a data object and insert it into a database. To do that, it uses the database configuration defined using the </span>\n    <Link to=\"/api/onInsert\" mdxType=\"Link\">`onInsert`</Link>\n    <span> method. As a rule of thumb, if you <strong>ARE</strong> testing a database, use the create method, otherwise use the make method.</span>\n    <h2 {...{\n      \"id\": \"type\"\n    }}>{`Type`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface CreateMethod<T> {\n  (): Promise<T>;\n  (overrides: DataObject): Promise<T>;\n  (count: number): Promise<T[]>;\n  (count: number, overrides: DataObject): Promise<T[]>;\n}\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Where `}<inlineCode parentName=\"p\">{`T`}</inlineCode>{` is the type passed to the factory function.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"args\"\n    }}>{`args`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`count \u001d(Number [optional])`}</inlineCode>{`: This argument defines how many objects should be generated (default: 1)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`overrides `}</inlineCode><Link to=\"/types#dataobject\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`(DataObject [optional])`}</inlineCode></Link>{`: These are value which should be overridden on the generated data `}<inlineCode parentName=\"li\">{`(default: {})`}</inlineCode></li>\n    </ul>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`return`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`data (Promise<`}</inlineCode><Link to=\"/types#dataobject\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`DataObject`}</inlineCode></Link><inlineCode parentName=\"li\">{`|`}</inlineCode><Link to=\"/types#dataobject\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`DataObject[]`}</inlineCode></Link>{` `}<inlineCode parentName=\"li\">{`>)`}</inlineCode>{`: Data object or list of data objects generated by your generator function`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"examples\"\n    }}>{`Examples`}</h2>\n    <h3 {...{\n      \"id\": \"-promiset\"\n    }}><inlineCode parentName=\"h3\">{`(): Promise<T>`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.create()\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make()} mdxType=\"FormatJson\" />\n    <h3 {...{\n      \"id\": \"overrides-dataobject-promiset\"\n    }}><inlineCode parentName=\"h3\">{`(overrides: DataObject): Promise<T>`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.create({ name: 'JOHN DOE' })\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make({\n      name: 'JOHN DOE'\n    })} mdxType=\"FormatJson\" />\n    <h3 {...{\n      \"id\": \"count-number-promiset\"\n    }}><inlineCode parentName=\"h3\">{`(count: number): Promise<T[]>`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.create(1)\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make(1)} mdxType=\"FormatJson\" />\n    <h3 {...{\n      \"id\": \"count-number-promiset-1\"\n    }}><inlineCode parentName=\"h3\">{`(count: number): Promise<T[]>`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.create(2)\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make(2)} mdxType=\"FormatJson\" />\n    <h3 {...{\n      \"id\": \"count-number-overrides-dataobject-promiset\"\n    }}><inlineCode parentName=\"h3\">{`(count: number, overrides: DataObject): Promise<T[]>`}</inlineCode></h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`UserFactory.create(2, { name: 'JOHN DOE' })\n`}</code></pre>\n    <FormatJson parse={() => UserFactory.make(2, {\n      name: 'JOHN DOE'\n    })} mdxType=\"FormatJson\" />\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import faker from 'faker';\nimport { isFunction } from './helpers';\nimport { EnumFactory } from './types';\n\nconst enumFactory = <T = any>(array: any[] | ((fake: any) => any)) => {\n  const generator = (n?: number): any[] => {\n    if (isFunction(array) && typeof array === 'function') {\n      return Array.from({ length: n || faker.random.number(10) }).map(() => array(faker));\n    }\n\n    return array as any[];\n  };\n\n  const get = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers.shuffle<T>([...data])[rand];\n    } else if (n < 1) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers\n        .shuffle<T>([...data])\n        .slice(rand, rand + 1);\n    } else {\n      mock = Array.from({ length: n }).map(() => {\n        const data = generator(n);\n        const rand = faker.random.number(data.length - 1);\n        return faker.helpers.shuffle<T>([...data])[rand];\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const unique = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers.shuffle<T>([...data])[rand];\n    } else if (n < 1) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers\n        .shuffle<T>([...data])\n        .slice(rand, rand + 1);\n    } else {\n      const N = !Array.isArray(array) || n < array.length ? n : array.length;\n      const partial = [...generator(N)];\n      mock = Array.from({ length: N }).map(() => {\n        return faker.helpers.shuffle<T>(partial).pop();\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const seed = (value?: number) => {\n    if (value) {\n      faker.seed(value);\n    }\n    return enumFactoryObject;\n  };\n\n  const enumFactoryObject = { seed, get, unique };\n\n  return enumFactoryObject as EnumFactory<T>;\n};\n\nexport default enumFactory;\n","export const DEFAULT_DATABASE_CONFIG = {\n  async insert(data: any) {\n    return data;\n  },\n  hydrate(data: any) {\n    return data;\n  },\n};\n","import faker from 'faker';\nimport { DEFAULT_DATABASE_CONFIG } from './constants';\nimport { isFunction, merge, resolveArgs } from './helpers';\nimport { DatabaseConfig, DataObject, Factory, FactoryGenerator, GenericExtension, MakeMethod } from './types';\n\nconst factory = <T, A = GenericExtension<T>>(generator: FactoryGenerator) => {\n  const database: DatabaseConfig<T> = DEFAULT_DATABASE_CONFIG;\n\n  const generate = (overrides: DataObject | any[] | null = null) => {\n    const data = generator(faker);\n\n    if (overrides === null) {\n      return merge(data, Array.isArray(data) ? [] : {}) as T;\n    }\n\n    return merge(data, overrides) as T;\n  };\n\n  const make = (count?: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n    let mock: T | T[];\n    if (count === undefined) {\n      mock = generate() as T;\n    } else if (count < 1) {\n      mock = [generate()] as T[];\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else if (isFunction(count) && typeof count === 'function') {\n      mock = generate(count(faker)) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return mock.map((model: T) => {\n        return database.hydrate(model);\n      });\n    }\n\n    return database.hydrate(mock);\n  };\n\n  const create = async (count?: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n    let mock: T | T[];\n    if (count != null && count < 1) {\n      mock = [generate()] as T[];\n    } else if (!Boolean(count)) {\n      mock = generate() as T;\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else if (isFunction(count) && typeof count === 'function') {\n      mock = generate(count(faker)) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return await Promise.all(\n        mock.map(async (model: T) => {\n          await database.insert(model);\n          return database.hydrate(model);\n        }),\n      );\n    }\n\n    await database.insert(mock);\n    return database.hydrate(mock);\n  };\n\n  const only = (keys: keyof T | Array<keyof T>, overrides: DataObject | FactoryGenerator = {}) => {\n    const overrideData = isFunction(overrides) && typeof overrides === 'function' ? overrides(faker) : overrides;\n    const data = make(overrideData);\n\n    return (Array.isArray(keys)\n      ? keys.reduce((filtered: Partial<T>, key) => ({ ...filtered, [key]: (data as Partial<T>)[key] }), {})\n      : { [keys]: (data as Partial<T>)[keys] }) as Partial<T>;\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const state = (name: string, stateValues: DataObject | FactoryGenerator) => {\n    if (['create', 'make', 'only', 'seed', 'state', 'onInsert', 'onHydrate'].indexOf(name) < 0) {\n      const stateData = isFunction(stateValues) && typeof stateValues === 'function' ? stateValues(faker) : stateValues;\n      const makeMethod = (count: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n        let mock: T | T[];\n        if (count === undefined) {\n          mock = generate(stateData) as T;\n        } else if (count < 1) {\n          mock = [generate(stateData)] as T[];\n        } else if (typeof count === 'object') {\n          mock = generate({ ...stateData, ...count }) as T;\n        } else if (isFunction(count) && typeof count === 'function') {\n          mock = generate({ ...stateData, ...count(faker) }) as T;\n        } else {\n          const { data, length } = resolveArgs(count, overrides);\n          mock = Array.from({ length }).map(() => generate({ ...stateData, ...data })) as T[];\n        }\n\n        faker.seed(faker.random.number());\n\n        if (Array.isArray(mock)) {\n          return mock.map((model: T) => {\n            return database.hydrate(model);\n          });\n        }\n\n        return database.hydrate(mock);\n      };\n\n      (factoryObject as any)[name as keyof A] = makeMethod as MakeMethod<T>;\n    }\n  };\n\n  const onInsert = (func: (data: T) => Promise<any>) => {\n    database.insert = func;\n\n    return factoryObject;\n  };\n\n  const onHydrate = (func: (data: T) => Promise<any>) => {\n    database.hydrate = func;\n\n    return factoryObject;\n  };\n\n  const factoryObject = { create, make, only, seed, state, onInsert, onHydrate };\n\n  return factoryObject as Factory<T> & A;\n};\n\nexport default factory;\n","import faker from 'faker';\nimport { DataObject } from './types';\n\nexport const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n\nexport const isFunction = (variable: any) => {\n  return variable && {}.toString.call(variable) === '[object Function]';\n};\n\nexport const merge = (data: DataObject, overrides: DataObject): DataObject => {\n  if (Array.isArray(data) && Array.isArray(overrides)) {\n    return data.map((value: any, key: number) => {\n      return key < overrides.length ? overrides[key] : value;\n    });\n  }\n  return Object.keys(data).reduce((values, key) => {\n    if (Object.keys(overrides).indexOf(key) < 0) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const resolveArgs = (...args: any[]): DataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else if (isFunction(arg) && typeof arg === 'function') {\n        return { ...resolved, data: arg(faker) };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n","export * from './types';\nexport { default as factory } from './factory';\nexport { default as enumFactory } from './enumFactory';\n"],"sourceRoot":""}