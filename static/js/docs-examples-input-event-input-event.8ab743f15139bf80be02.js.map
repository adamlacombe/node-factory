{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/docs/examples/input-event/InputEvent.ts","/Users/olavo/Projects/node-factory/docs/examples/input-event/input-event.mdx","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["json","styles","parse","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","InputEvent","factory","fake","target","value","random","uuid","create","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","FormatJson","isMDXComponent","isObject","variable","constructor","Object","resolveArgs","args","reduce","resolved","arg","length","data","merge","overrides","keys","values","override","rest","generator","faker","factoryObject","make","count","Array","from","map","only","isArray","filtered","seed"],"mappings":"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","file":"static/js/docs-examples-input-event-input-event.7b114f71.js","sourcesContent":["// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","import { factory } from '../../../src/index';\n\nconst InputEvent = factory(fake => ({\n  target: {\n    value: fake.random.uuid(),\n  }\n})).create;\n\nexport default InputEvent;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport InputEvent from './InputEvent';\nimport FormatJson from '../../components/FormatJson';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"input-event\"\n    }}>{`Input event`}</h1>\n    <p>{`One common thing tested when developing app with `}<a parentName=\"p\" {...{\n        \"href\": \"http://reactjs.org/\"\n      }}>{`React.js`}</a>{` is when you type into an\ninput and you want you component to react to this event. To achieve this, you have to do something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`it('responds to input change', done => {\n  component.find('input#name')\n           .simulate('change', { target: { value: 'NEW VALUE' } });\n\n  expect(component.state('data').name).toBe('NEW VALUE');\n});\n`}</code></pre>\n    <p>{`So, to simulate a simple change event, we have to constantly describe this event object which has a nested\nvalue (which is actually what usually interests us). So, how can we use `}<inlineCode parentName=\"p\">{`node-factory`}</inlineCode>{` to clean this?`}</p>\n    <h2 {...{\n      \"id\": \"inputevent-factory\"\n    }}>{`InputEvent factory`}</h2>\n    <p>{`One thing we can do to make this event simulation a little cleaner is to define an InputEvent factory. For\nsimplicity sake, we're gonna keep this simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { factory } from 'node-factory';\n\nconst InputEvent = factory(fake => ({\n  target: {\n    value: fake.random.uuid(),\n  }\n})).create;\n\nexport default InputEvent;\n`}</code></pre>\n    <FormatJson parse={() => InputEvent()} mdxType=\"FormatJson\" />\n    <p>{`In this case, the only method that we're interested is the `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` method. That being said, we will only export\nthis method.`}</p>\n    <h2 {...{\n      \"id\": \"changing-the-value\"\n    }}>{`Changing the value`}</h2>\n    <p>{`So, from what we know so far, we now set the event value using our factory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`InputEvent({ target: { value: 'NEW VALUE' } })\n`}</code></pre>\n    <FormatJson parse={() => InputEvent({\n      target: {\n        value: 'NEW VALUE'\n      }\n    })} mdxType=\"FormatJson\" />\n    <p>{`So how does this help us?! It's actually longer now!! Calm down... What you might not know is that `}<inlineCode parentName=\"p\">{`node-factory`}</inlineCode>{`\nhas a shorthand. If you simply pass `}<inlineCode parentName=\"p\">{`{ value: 'NEW VALUE' }`}</inlineCode>{` to the create method, it is smart enough to know\nthat it should update the nested object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`InputEvent({ value: 'NEW VALUE' })\n`}</code></pre>\n    <FormatJson parse={() => InputEvent({\n      value: 'NEW VALUE'\n    })} mdxType=\"FormatJson\" />\n    <h2 {...{\n      \"id\": \"updating-our-test\"\n    }}>{`Updating our test`}</h2>\n    <p>{`Now, on our tests we can do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`it('responds to input change', done => {\n  component.find('input#name')\n           .simulate('change', InputEvent({ value: 'NEW VALUE' }));\n\n  expect(component.state('data').name).toBe('NEW VALUE');\n});\n`}</code></pre>\n    <p>{`You can also do this for other events, e.g. Keyboard events (setting a given keyCode), Wheel event, etc., and\nhave a cleaner and more readable interface to test your components.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","export const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n","import faker from 'faker';\nimport { isObject } from './helpers';\nimport { FactoryGenerator, IDataObject, IFactoryObject } from './types';\n\nexport * from './types';\n\nexport const resolveArgs = (...args: any[]): IDataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n\nexport const merge = (data: IDataObject, overrides: IDataObject): IDataObject => {\n  return Object.keys(data).reduce((values, key) => {\n    if (!overrides[key]) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const factory = (generator: FactoryGenerator): IFactoryObject => {\n  const create = (overrides: IDataObject = {}): IDataObject => {\n    const data = generator(faker);\n\n    return merge(data, overrides);\n  };\n\n  const make = (count: number | IDataObject = 1, overrides?: IDataObject): IDataObject[] => {\n    const { data, length } = resolveArgs(count, overrides);\n\n    return Array.from({ length }).map(() => create(data));\n  };\n\n  const only = (keys: string | string[], overrides: IDataObject = {}): IDataObject => {\n    const data = create(overrides);\n\n    return Array.isArray(keys)\n      ? keys.reduce((filtered: IDataObject, key) => ({ ...filtered, [key]: data[key] }), {})\n      : { [keys]: data[keys] };\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const factoryObject: IFactoryObject = { create, make, only, seed };\n\n  return factoryObject;\n};\n"],"sourceRoot":""}