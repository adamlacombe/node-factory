{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/api/types.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oUAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,oBACL,0BAAYC,WAAW,MAAvB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8EAIL,8BACE,iBAAGA,WAAW,cAAd,2DAAuF,+BAAGA,WAAW,KAAQ,CACzG,KAAQ,+CAD2E,gDAIzF,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2VAWL,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2JASL,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iMASL,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gFAML,iBAAQ,CACN,GAAM,sBACL,0BAAYA,WAAW,MAAvB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0DAIL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wDAML,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sHAOL,iBAAQ,CACN,GAAM,WACL,0BAAYA,WAAW,MAAvB,YACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mEAOL,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sEAOL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4H,wKAYTJ,EAAWK,gBAAiB","file":"static/js/docs-api-types.cb913675.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h1>\n    <h2 {...{\n      \"id\": \"factorygenerator\"\n    }}><inlineCode parentName=\"h2\">{`FactoryGenerator`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type FactoryGenerator = <T>(fake: Faker.FakerStatic) => IDataObject<T>;\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For more information on Faker.FakerStatic type refer to `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.npmjs.com/package/@types/faker\"\n        }}>{`https://www.npmjs.com/package/@types/faker`}</a></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"ifactoryobject\"\n    }}><inlineCode parentName=\"h2\">{`IFactoryObject`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface IFactoryObject<T = any> {\n  make: StateGenerator<T>;\n  create: PromiseGenerator<T>;\n  only: (keys: keyof T | Array<keyof T>, overrides?: IDataObject) => Partial<T>;\n  seed: (value: number) => IFactoryObject<T>;\n  state: (name: string, stateValues: IDataObject) => void;\n  configDatabase(options: DatabaseConfig<T>): void;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"stategenerator\"\n    }}><inlineCode parentName=\"h2\">{`StateGenerator`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface StateGenerator<T> {\n  (): T;\n  (overrides: IDataObject): T;\n  (count: number): T[];\n  (count: number, overrides: IDataObject): T[];\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"promisegenerator\"\n    }}><inlineCode parentName=\"h2\">{`PromiseGenerator`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface PromiseGenerator<T> {\n  (): Promise<T>;\n  (overrides: IDataObject): Promise<T>;\n  (count: number): Promise<T[]>;\n  (count: number, overrides: IDataObject): Promise<T[]>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"genericextension\"\n    }}><inlineCode parentName=\"h2\">{`GenericExtension`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface GenericExtension<T> {\n  [state: string]: StateGenerator<T>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"factorygenerator-1\"\n    }}><inlineCode parentName=\"h2\">{`FactoryGenerator`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`type FactoryGenerator = (fake: any) => IDataObject;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"idataobject\"\n    }}><inlineCode parentName=\"h2\">{`IDataObject`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`interface IDataObject {\n  [key: string]: any;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"databaseconfig\"\n    }}><inlineCode parentName=\"h2\">{`DatabaseConfig`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface DatabaseConfig<T> {\n  insert?: (data: T) => Promise<any>;\n  hydrate?: (data: T) => Promise<any>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enumget\"\n    }}><inlineCode parentName=\"h2\">{`EnumGet`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface EnumGet<T> {\n  (): T;\n  (count: number): T[];\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enumunique\"\n    }}><inlineCode parentName=\"h2\">{`EnumUnique`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface EnumUnique<T> {\n  (): T;\n  (count: number): T[];\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enumfactory\"\n    }}><inlineCode parentName=\"h2\">{`EnumFactory`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface EnumFactory<T> {\n  get: EnumGet<T>;\n  unique: EnumUnique<T>;\n  seed(value?: number): EnumFactory<T>;\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}