(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"./docs/api/types.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return o});var a=n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),c={},b="wrapper";function o(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(b,Object.assign({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"types"},"Types"),Object(r.b)("h2",{id:"factorygenerator"},Object(r.b)("inlineCode",{parentName:"h2"},"FactoryGenerator")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"type FactoryGenerator = <T>(fake: Faker.FakerStatic) => IDataObject<T>;\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"For more information on Faker.FakerStatic type refer to ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://www.npmjs.com/package/@types/faker"}),"https://www.npmjs.com/package/@types/faker"))),Object(r.b)("h2",{id:"ifactoryobject"},Object(r.b)("inlineCode",{parentName:"h2"},"IFactoryObject")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"interface IFactoryObject<T = any> {\n  make: StateGenerator<T>;\n  create: PromiseGenerator<T>;\n  only: (keys: keyof T | Array<keyof T>, overrides?: IDataObject) => Partial<T>;\n  seed: (value: number) => IFactoryObject<T>;\n  state: (name: string, stateValues: IDataObject) => void;\n  configDatabase(options: DatabaseConfig<T>): void;\n}\n")),Object(r.b)("h2",{id:"stategenerator"},Object(r.b)("inlineCode",{parentName:"h2"},"StateGenerator")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"interface StateGenerator<T> {\n  (): T;\n  (overrides: IDataObject): T;\n  (count: number): T[];\n  (count: number, overrides: IDataObject): T[];\n}\n")),Object(r.b)("h2",{id:"promisegenerator"},Object(r.b)("inlineCode",{parentName:"h2"},"PromiseGenerator")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"interface PromiseGenerator<T> {\n  (): Promise<T>;\n  (overrides: IDataObject): Promise<T>;\n  (count: number): Promise<T[]>;\n  (count: number, overrides: IDataObject): Promise<T[]>;\n}\n")),Object(r.b)("h2",{id:"genericextension"},Object(r.b)("inlineCode",{parentName:"h2"},"GenericExtension")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"interface GenericExtension<T> {\n  [state: string]: StateGenerator<T>;\n}\n")),Object(r.b)("h2",{id:"factorygenerator-1"},Object(r.b)("inlineCode",{parentName:"h2"},"FactoryGenerator")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"type FactoryGenerator = (fake: any) => IDataObject;\n")),Object(r.b)("h2",{id:"idataobject"},Object(r.b)("inlineCode",{parentName:"h2"},"IDataObject")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"interface IDataObject {\n  [key: string]: any;\n}\n")),Object(r.b)("h2",{id:"databaseconfig"},Object(r.b)("inlineCode",{parentName:"h2"},"DatabaseConfig")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface DatabaseConfig<T> {\n  insert?: (data: T) => Promise<any>;\n  hydrate?: (data: T) => Promise<any>;\n}\n")),Object(r.b)("h2",{id:"enumget"},Object(r.b)("inlineCode",{parentName:"h2"},"EnumGet")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface EnumGet<T> {\n  (): T;\n  (count: number): T[];\n}\n")),Object(r.b)("h2",{id:"enumunique"},Object(r.b)("inlineCode",{parentName:"h2"},"EnumUnique")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface EnumUnique<T> {\n  (): T;\n  (count: number): T[];\n}\n")),Object(r.b)("h2",{id:"enumfactory"},Object(r.b)("inlineCode",{parentName:"h2"},"EnumFactory")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface EnumFactory<T> {\n  get: EnumGet<T>;\n  unique: EnumUnique<T>;\n  seed(value?: number): EnumFactory<T>;\n}\n")))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/api/types.mdx"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-api-types.ee169855a235daf95671.js.map