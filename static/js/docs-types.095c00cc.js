(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{"./docs/types.mdx":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return o});var n=a("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(a("./node_modules/react/index.js"),a("./node_modules/@mdx-js/react/dist/index.es.js")),c={},b="wrapper";function o(e){var t=e.components,a=Object(n.a)(e,["components"]);return Object(r.b)(b,Object.assign({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"types"},"Types"),Object(r.b)("h2",{id:"factorygenerator"},Object(r.b)("inlineCode",{parentName:"h2"},"FactoryGenerator")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type FactoryGenerator = (fake: Faker.FakerStatic) => DataObject<T>;\n")),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"For more information on Faker.FakerStatic type refer to ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://www.npmjs.com/package/@types/faker"}),"https://www.npmjs.com/package/@types/faker"))),Object(r.b)("h2",{id:"factory"},Object(r.b)("inlineCode",{parentName:"h2"},"Factory")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface Factory<T = any> {\n  make: MakeMethod<T>;\n  create: CreateMethod<T>;\n  only: (keys: keyof T | Array<keyof T>, overrides?: DataObject | FactoryGenerator) => Partial<T>;\n  seed: (value: number) => Factory<T>;\n  state: (name: string, stateValues: DataObject | FactoryGenerator) => void;\n  onInsert(func: DatabaseConfig<T>['insert']): Factory<T>;\n  onHydrate(func: DatabaseConfig<T>['hydrate']): Factory<T>;\n}\n")),Object(r.b)("h2",{id:"makemethod"},Object(r.b)("inlineCode",{parentName:"h2"},"MakeMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface MakeMethod<T> {\n  (): T;\n  (overrides: DataObject | FactoryGenerator): T;\n  (count: number): T[];\n  (count: number, overrides: DataObject | FactoryGenerator): T[];\n}\n")),Object(r.b)("h2",{id:"createmethod"},Object(r.b)("inlineCode",{parentName:"h2"},"CreateMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface CreateMethod<T> {\n  (): Promise<T>;\n  (overrides: DataObject | FactoryGenerator): Promise<T>;\n  (count: number): Promise<T[]>;\n  (count: number, overrides: DataObject | FactoryGenerator): Promise<T[]>;\n}\n")),Object(r.b)("h2",{id:"onlymethod"},Object(r.b)("inlineCode",{parentName:"h2"},"OnlyMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type OnlyMethod<T> = (keys: keyof T | Array<keyof T>, overrides?: DataObject | FactoryGenerator) => Partial<T>;\n")),Object(r.b)("h2",{id:"seedmethod"},Object(r.b)("inlineCode",{parentName:"h2"},"SeedMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type SeedMethod<T> = (value: number) => Factory<T>;\n")),Object(r.b)("h2",{id:"statemethod"},Object(r.b)("inlineCode",{parentName:"h2"},"StateMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type StateMethod = (name: string, stateValues: DataObject | FactoryGenerator) => void;\n")),Object(r.b)("h2",{id:"oninsertmethod"},Object(r.b)("inlineCode",{parentName:"h2"},"OnInsertMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type OnInsertMethod<T> = (func: DatabaseConfig<T>['insert']) => Factory<T>;\n")),Object(r.b)("h2",{id:"onhydratemethod"},Object(r.b)("inlineCode",{parentName:"h2"},"OnHydrateMethod")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"type OnHydrateMethod<T> = (func: DatabaseConfig<T>['hydrate']) => Factory<T>;\n")),Object(r.b)("h2",{id:"dataobject"},Object(r.b)("inlineCode",{parentName:"h2"},"DataObject")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface DataObject {\n  [key: string]: any;\n}\n")),Object(r.b)("h2",{id:"genericextension"},Object(r.b)("inlineCode",{parentName:"h2"},"GenericExtension")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface GenericExtension<T> {\n  [state: string]: MakeMethod<T>;\n}\n")),Object(r.b)("h2",{id:"databaseconfig"},Object(r.b)("inlineCode",{parentName:"h2"},"DatabaseConfig")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface DatabaseConfig<T> {\n  insert: (data: T) => Promise<any>;\n  hydrate: (data: T) => any;\n}\n")),Object(r.b)("h2",{id:"enumfactory"},Object(r.b)("inlineCode",{parentName:"h2"},"EnumFactory")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface EnumFactory<T> {\n  get: EnumGet<T>;\n  unique: EnumUnique<T>;\n  seed(value?: number): EnumFactory<T>;\n}\n")),Object(r.b)("h2",{id:"enumget"},Object(r.b)("inlineCode",{parentName:"h2"},"EnumGet")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface EnumGet<T> {\n  (): T;\n  (count: number): T[];\n}\n")),Object(r.b)("h2",{id:"enumunique"},Object(r.b)("inlineCode",{parentName:"h2"},"EnumUnique")),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-typescript"}),"interface EnumUnique<T> {\n  (): T;\n  (count: number): T[];\n}\n")))}o&&o===Object(o)&&Object.isExtensible(o)&&Object.defineProperty(o,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/types.mdx"}}),o.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-types.c6b1dba63bb8bd7d77fc.js.map