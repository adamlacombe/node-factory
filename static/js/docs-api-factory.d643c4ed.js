(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"./docs/api/factory.mdx":function(e,t,n){"use strict";n.r(t),n.d(t,"default",function(){return s});var a=n("./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),r=(n("./node_modules/react/index.js"),n("./node_modules/@mdx-js/react/dist/index.es.js")),o=n("./node_modules/docz/dist/index.esm.js"),i={},c="wrapper";function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(r.b)(c,Object.assign({},i,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"factorygenerator"},Object(r.b)("inlineCode",{parentName:"h1"},"factory(generator)")),Object(r.b)("h3",{id:"args"},"args"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"generator "),Object(r.b)(o.b,{to:"/api/types#factorygenerator",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"(FactoryGenerator)")),": Generator function which describes your data object. This function receives a ",Object(r.b)("inlineCode",{parentName:"li"},"faker")," instance as an argument")),Object(r.b)("h3",{id:"return"},"return"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Factory object "),Object(r.b)(o.b,{to:"/api/types#ifactoryobject",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"(IFactoryObject)")),": The factory object contains four methods: ",Object(r.b)(o.b,{to:"/api/create",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"create")),", ",Object(r.b)(o.b,{to:"/api/only",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"only")),", ",Object(r.b)(o.b,{to:"/api/make",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"make")),", ",Object(r.b)(o.b,{to:"/api/seed",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"seed")),", ",Object(r.b)(o.b,{to:"/api/state",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"state"))," and ",Object(r.b)(o.b,{to:"/api/configDatabase",mdxType:"Link"},Object(r.b)("inlineCode",{parentName:"li"},"configDatabase")))),Object(r.b)("hr",{style:{marginTop:"2rem",marginBottom:"2rem",opacity:"0.2"}}),Object(r.b)("h2",{id:"description"},"Description"),Object(r.b)("p",null,"You should create a factory object for the data you want to generate, you need to specify the type of data. To do this, the\nfactory class makes use of the ",Object(r.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/marak/Faker.js/"}),"Faker.js")," package which provides an easy way to generate random data."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("h3",{id:"no-types"},"No types"),Object(r.b)("p",null,"If no types are defined, the return types of ",Object(r.b)("inlineCode",{parentName:"p"},"make")," and ",Object(r.b)("inlineCode",{parentName:"p"},"create")," will be set to ",Object(r.b)("inlineCode",{parentName:"p"},"any"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-ts"}),"import { factory } from 'node-factory';\n\n// UserFactory.make() => any\nconst UserFactory = factory((fake: Faker) => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n\nexport default UserFactory;\n")),Object(r.b)("h3",{id:"typing"},"Typing"),Object(r.b)("p",null,"If a type is defined, the return types of ",Object(r.b)("inlineCode",{parentName:"p"},"make")," and ",Object(r.b)("inlineCode",{parentName:"p"},"create")," will be set to the given type."),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { factory } from 'node-factory';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\n// UserFactory.make() => User\nexport const UserFactory = factory<User>(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n")),Object(r.b)("h3",{id:"with-states"},"With states"),Object(r.b)("p",null,"If you need to create states, you can declare the state's types and pass it to the factory function:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import { factory } from 'node-factory';\n\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n}\n\nexport interface UserStates {\n  female: StateGenerator<User>;\n  male: StateGenerator<User>;\n}\n\n// UserFactory.make() => User\nexport const UserFactory = factory<User, UserStates>(fake => ({\n  id: fake.random.uuid(),\n  name: fake.name.findName(),\n  email: fake.internet.email(),\n}));\n\n// UserFactory.female() => User\nUserFactory.state('female', {\n  name: 'Joan Doe',\n});\n\n// UserFactory.male() => User\nUserFactory.state('male', {\n  name: 'John Doe',\n});\n")))}s&&s===Object(s)&&Object.isExtensible(s)&&Object.defineProperty(s,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/api/factory.mdx"}}),s.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-api-factory.ee169855a235daf95671.js.map