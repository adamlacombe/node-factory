{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/types.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"iUAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,SADR,SAGA,iBAAQ,CACN,GAAM,oBACL,0BAAYC,WAAW,MAAvB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0EAIL,8BACE,iBAAGA,WAAW,cAAd,2DAAuF,+BAAGA,WAAW,KAAQ,CACzG,KAAQ,+CAD2E,gDAIzF,iBAAQ,CACN,GAAM,WACL,0BAAYA,WAAW,MAAvB,YACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,8aAYL,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2LASL,iBAAQ,CACN,GAAM,gBACL,0BAAYA,WAAW,MAAvB,iBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iOASL,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sHAIL,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,0DAIL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,6FAIL,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kFAIL,iBAAQ,CACN,GAAM,mBACL,0BAAYA,WAAW,MAAvB,oBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,oFAIL,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uDAML,iBAAQ,CACN,GAAM,oBACL,0BAAYA,WAAW,MAAvB,qBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,4EAML,iBAAQ,CACN,GAAM,kBACL,0BAAYA,WAAW,MAAvB,mBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2GAOL,iBAAQ,CACN,GAAM,eACL,0BAAYA,WAAW,MAAvB,gBACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2HAQL,iBAAQ,CACN,GAAM,WACL,0BAAYA,WAAW,MAAvB,YACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mEAOL,iBAAQ,CACN,GAAM,cACL,0BAAYA,WAAW,MAAvB,eACH,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,uE,oKAWTJ,EAAWK,gBAAiB","file":"static/js/docs-types.095c00cc.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\n\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h1>\n    <h2 {...{\n      \"id\": \"factorygenerator\"\n    }}><inlineCode parentName=\"h2\">{`FactoryGenerator`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type FactoryGenerator = (fake: Faker.FakerStatic) => DataObject<T>;\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`For more information on Faker.FakerStatic type refer to `}<a parentName=\"p\" {...{\n          \"href\": \"https://www.npmjs.com/package/@types/faker\"\n        }}>{`https://www.npmjs.com/package/@types/faker`}</a></p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"factory\"\n    }}><inlineCode parentName=\"h2\">{`Factory`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface Factory<T = any> {\n  make: MakeMethod<T>;\n  create: CreateMethod<T>;\n  only: (keys: keyof T | Array<keyof T>, overrides?: DataObject | FactoryGenerator) => Partial<T>;\n  seed: (value: number) => Factory<T>;\n  state: (name: string, stateValues: DataObject | FactoryGenerator) => void;\n  onInsert(func: DatabaseConfig<T>['insert']): Factory<T>;\n  onHydrate(func: DatabaseConfig<T>['hydrate']): Factory<T>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"makemethod\"\n    }}><inlineCode parentName=\"h2\">{`MakeMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface MakeMethod<T> {\n  (): T;\n  (overrides: DataObject | FactoryGenerator): T;\n  (count: number): T[];\n  (count: number, overrides: DataObject | FactoryGenerator): T[];\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"createmethod\"\n    }}><inlineCode parentName=\"h2\">{`CreateMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface CreateMethod<T> {\n  (): Promise<T>;\n  (overrides: DataObject | FactoryGenerator): Promise<T>;\n  (count: number): Promise<T[]>;\n  (count: number, overrides: DataObject | FactoryGenerator): Promise<T[]>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"onlymethod\"\n    }}><inlineCode parentName=\"h2\">{`OnlyMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type OnlyMethod<T> = (keys: keyof T | Array<keyof T>, overrides?: DataObject | FactoryGenerator) => Partial<T>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"seedmethod\"\n    }}><inlineCode parentName=\"h2\">{`SeedMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type SeedMethod<T> = (value: number) => Factory<T>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"statemethod\"\n    }}><inlineCode parentName=\"h2\">{`StateMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type StateMethod = (name: string, stateValues: DataObject | FactoryGenerator) => void;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"oninsertmethod\"\n    }}><inlineCode parentName=\"h2\">{`OnInsertMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type OnInsertMethod<T> = (func: DatabaseConfig<T>['insert']) => Factory<T>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"onhydratemethod\"\n    }}><inlineCode parentName=\"h2\">{`OnHydrateMethod`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type OnHydrateMethod<T> = (func: DatabaseConfig<T>['hydrate']) => Factory<T>;\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"dataobject\"\n    }}><inlineCode parentName=\"h2\">{`DataObject`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface DataObject {\n  [key: string]: any;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"genericextension\"\n    }}><inlineCode parentName=\"h2\">{`GenericExtension`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface GenericExtension<T> {\n  [state: string]: MakeMethod<T>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"databaseconfig\"\n    }}><inlineCode parentName=\"h2\">{`DatabaseConfig`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface DatabaseConfig<T> {\n  insert: (data: T) => Promise<any>;\n  hydrate: (data: T) => any;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enumfactory\"\n    }}><inlineCode parentName=\"h2\">{`EnumFactory`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface EnumFactory<T> {\n  get: EnumGet<T>;\n  unique: EnumUnique<T>;\n  seed(value?: number): EnumFactory<T>;\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enumget\"\n    }}><inlineCode parentName=\"h2\">{`EnumGet`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface EnumGet<T> {\n  (): T;\n  (count: number): T[];\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"enumunique\"\n    }}><inlineCode parentName=\"h2\">{`EnumUnique`}</inlineCode></h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`interface EnumUnique<T> {\n  (): T;\n  (count: number): T[];\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}