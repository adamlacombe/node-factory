{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/docs/examples/input-event/InputEvent.ts","/Users/olavo/Projects/node-factory/docs/examples/input-event/input-event.mdx","/Users/olavo/Projects/node-factory/src/enumFactory.ts","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/factory.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["json","styles","parse","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","InputEvent","factory","fake","target","value","random","uuid","make","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","FormatJson","isMDXComponent","enumFactory","array","enumFactoryObject","seed","faker","get","n","mock","helpers","shuffle","pop","slice","Array","from","length","map","unique","N","partial","isObject","variable","constructor","Object","merge","data","overrides","isArray","keys","reduce","values","indexOf","override","rest","resolveArgs","args","resolved","arg","generator","database","insert","hydrate","generate","count","factoryObject","create","a","Boolean","Promise","all","model","only","filtered","state","name","stateValues","configDatabase","options","forEach"],"mappings":"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","file":"static/js/docs-examples-input-event-input-event.532ac3f2.js","sourcesContent":["// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","import { factory } from '../../../src/index';\n\nconst InputEvent = factory(fake => ({\n  target: {\n    value: fake.random.uuid(),\n  }\n})).make;\n\nexport default InputEvent;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport InputEvent from './InputEvent';\nimport FormatJson from '../../components/FormatJson';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"input-event\"\n    }}>{`Input event`}</h1>\n    <p>{`One common thing tested when developing app with `}<a parentName=\"p\" {...{\n        \"href\": \"http://reactjs.org/\"\n      }}>{`React.js`}</a>{` is when you type into an\ninput and you want you component to react to this event. To achieve this, you have to do something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`it('responds to input change', done => {\n  component.find('input#name')\n           .simulate('change', { target: { value: 'NEW VALUE' } });\n\n  expect(component.state('data').name).toBe('NEW VALUE');\n});\n`}</code></pre>\n    <p>{`So, to simulate a simple change event, we have to constantly describe this event object which has a nested\nvalue (which is actually what usually interests us). So, how can we use `}<inlineCode parentName=\"p\">{`node-factory`}</inlineCode>{` to clean this?`}</p>\n    <h2 {...{\n      \"id\": \"inputevent-factory\"\n    }}>{`InputEvent factory`}</h2>\n    <p>{`One thing we can do to make this event simulation a little cleaner is to define an InputEvent factory. For\nsimplicity sake, we're gonna keep this simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { factory } from 'node-factory';\n\nconst InputEvent = factory(fake => ({\n  target: {\n    value: fake.random.uuid(),\n  }\n})).make;\n\nexport default InputEvent;\n`}</code></pre>\n    <FormatJson parse={() => InputEvent()} mdxType=\"FormatJson\" />\n    <p>{`In this case, the only method that we're interested is the `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` method. That being said, we will only export\nthis method.`}</p>\n    <h2 {...{\n      \"id\": \"changing-the-value\"\n    }}>{`Changing the value`}</h2>\n    <p>{`So, from what we know so far, we now set the event value using our factory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`InputEvent({ target: { value: 'NEW VALUE' } })\n`}</code></pre>\n    <FormatJson parse={() => InputEvent({\n      target: {\n        value: 'NEW VALUE'\n      }\n    })} mdxType=\"FormatJson\" />\n    <p>{`So how does this help us?! It's actually longer now!! Calm down... What you might not know is that `}<inlineCode parentName=\"p\">{`node-factory`}</inlineCode>{`\nhas a shorthand. If you simply pass `}<inlineCode parentName=\"p\">{`{ value: 'NEW VALUE' }`}</inlineCode>{` to the create method, it is smart enough to know\nthat it should update the nested object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`InputEvent({ value: 'NEW VALUE' })\n`}</code></pre>\n    <FormatJson parse={() => InputEvent({\n      value: 'NEW VALUE'\n    })} mdxType=\"FormatJson\" />\n    <h2 {...{\n      \"id\": \"updating-our-test\"\n    }}>{`Updating our test`}</h2>\n    <p>{`Now, on our tests we can do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`it('responds to input change', done => {\n  component.find('input#name')\n           .simulate('change', InputEvent({ value: 'NEW VALUE' }));\n\n  expect(component.state('data').name).toBe('NEW VALUE');\n});\n`}</code></pre>\n    <p>{`You can also do this for other events, e.g. Keyboard events (setting a given keyCode), Wheel event, etc., and\nhave a cleaner and more readable interface to test your components.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import faker from 'faker';\nimport { EnumFactory } from './types';\n\nconst enumFactory = <T = any>(array: any[]) => {\n  const get = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      mock = faker.helpers\n        .shuffle<T>([...array])\n        .pop();\n    } else if (n < 1) {\n      mock = faker.helpers\n        .shuffle<T>([...array])\n        .slice(0, 1);\n    } else {\n      mock = Array.from({ length: n }).map(() =>\n        faker.helpers\n          .shuffle<T>([...array])\n          .pop(),\n      );\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const unique = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      mock = faker.helpers\n        .shuffle<T>([...array])\n        .pop();\n    } else if (n < 1) {\n      mock = faker.helpers\n        .shuffle<T>([...array])\n        .slice(0, 1);\n    } else {\n      const N = n < array.length ? n : array.length;\n      const partial = faker.helpers.shuffle<T>([...array]);\n      mock = Array.from({ length: N }).map(() => {\n        return partial.pop();\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const seed = (value?: number) => {\n    if (value) {\n      faker.seed(value);\n    }\n    return enumFactoryObject;\n  };\n\n  const enumFactoryObject = { seed, get, unique };\n\n  return enumFactoryObject as EnumFactory<T>;\n};\n\nexport default enumFactory;\n","import { IDataObject } from './types';\n\nexport const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n\nexport const merge = (data: IDataObject, overrides: IDataObject): IDataObject => {\n  if (Array.isArray(data) && Array.isArray(overrides)) {\n    return data.map((value: any, key: number) => {\n      return key < overrides.length ? overrides[key] : value;\n    });\n  }\n  return Object.keys(data).reduce((values, key) => {\n    if (Object.keys(overrides).indexOf(key) < 0) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const resolveArgs = (...args: any[]): IDataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n","import faker from 'faker';\nimport { merge, resolveArgs } from './helpers';\nimport {\n  DatabaseConfig,\n  FactoryGenerator,\n  GenericExtension,\n  IDataObject,\n  IFactoryObject,\n  StateGenerator,\n} from './types';\n\nconst factory = <T, A = GenericExtension<T>>(generator: FactoryGenerator) => {\n  const database: DatabaseConfig<T> = {\n    async insert(data: T) {\n      return data;\n    },\n    async hydrate(data: T) {\n      return data;\n    },\n  };\n\n  const generate = (overrides: IDataObject | any[] | null = null) => {\n    const data = generator(faker);\n\n    if (overrides === null) {\n      return merge(data, Array.isArray(data) ? [] : {}) as T;\n    }\n\n    return merge(data, overrides) as T;\n  };\n\n  const make = (count?: number | IDataObject, overrides?: IDataObject) => {\n    let mock: T | T[];\n    if (count === undefined) {\n      mock = generate() as T;\n    } else if (count < 1) {\n      mock = [generate()] as T[];\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock;\n  };\n\n  const create = async (count?: number | IDataObject, overrides?: IDataObject) => {\n    let mock: T | T[];\n    if (count != null && count < 1) {\n      mock = [generate()] as T[];\n    } else if (!Boolean(count)) {\n      mock = generate() as T;\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return await Promise.all(\n        mock.map(async (model: T) => {\n          await database.insert(model);\n          return database.hydrate(model);\n        }),\n      );\n    }\n\n    await database.insert(mock);\n    return database.hydrate(mock);\n  };\n\n  const only = (keys: keyof T | Array<keyof T>, overrides: IDataObject = {}) => {\n    const data = make(overrides);\n\n    return (Array.isArray(keys)\n      ? keys.reduce((filtered: Partial<T>, key) => ({ ...filtered, [key]: (data as Partial<T>)[key] }), {})\n      : { [keys]: (data as Partial<T>)[keys] }) as Partial<T>;\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const state = (name: string, stateValues: IDataObject) => {\n    if (['create', 'make', 'only', 'seed', 'state', 'configDatabase'].indexOf(name) < 0) {\n      const stateGenerator = (count: number | IDataObject = 1, overrides?: IDataObject) => {\n        let mock: T | T[];\n        if (count === undefined) {\n          mock = generate(stateValues) as T;\n        } else if (count < 1) {\n          mock = [generate(stateValues)] as T[];\n        } else if (typeof count === 'object') {\n          mock = generate({\n            ...stateValues,\n            ...count,\n          }) as T;\n        } else {\n          const { data, length } = resolveArgs(count, overrides);\n          mock = Array.from({ length }).map(() =>\n            make({\n              ...stateValues,\n              ...data,\n            }),\n          ) as T[];\n        }\n\n        faker.seed(faker.random.number());\n\n        return mock;\n      };\n\n      (factoryObject as any)[name as keyof A] = stateGenerator as StateGenerator<T>;\n    }\n  };\n\n  const configDatabase = (options: Partial<DatabaseConfig<T>>) => {\n    Object.keys(database).forEach((key: string) => {\n      if ((options as any)[key]) {\n        (database as any)[key] = (options as any)[key];\n      }\n    });\n  };\n\n  const factoryObject = { create, make, only, seed, state, configDatabase };\n\n  return factoryObject as IFactoryObject<T> & A;\n};\n\nexport default factory;\n","export * from './types';\nexport { default as factory } from './factory';\nexport { default as enumFactory } from './enumFactory';\n"],"sourceRoot":""}