{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/enum-fatory-api/enumFactory.mdx"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","to","style","marginTop","marginBottom","opacity","isMDXComponent"],"mappings":"mYAYMA,EAAc,GAGdC,EAAY,UACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,iBAAQ,CACN,GAAM,gBACL,0BAAYC,WAAW,MAAvB,mBACH,iBAAQ,CACN,GAAM,eADR,eAGA,4LACiC,+BAAGA,WAAW,KAAQ,CACnD,KAAQ,uCADqB,YADjC,gEAIA,iBAAQ,CACN,GAAM,QADR,QAGA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kFAIL,iBAAQ,CACN,GAAM,QADR,QAGA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,wCAApB,8GAAoN,0BAAYA,WAAW,MAAvB,SAApN,8BAEF,iBAAQ,CACN,GAAM,UADR,UAGA,sBACE,kBAAIA,WAAW,MAAK,0BAAYA,WAAW,MAAvB,wBAAiE,YAAC,IAAD,CAAMC,GAAG,qBAAqBF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,qBAAlI,oDAA2P,YAAC,IAAD,CAAMC,GAAG,wBAAwBF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,QAA3S,KAAwW,YAAC,IAAD,CAAMC,GAAG,2BAA2BF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,WAA3Z,QAA8d,YAAC,IAAD,CAAMC,GAAG,yBAAyBF,QAAQ,QAAO,0BAAYC,WAAW,MAAvB,SAA/gB,MAEF,kBAAIE,MAAO,CACTC,UAAW,OACXC,aAAc,OACdC,QAAS,SAEX,iBAAQ,CACN,GAAM,SADR,SAGA,uBAAK,kCAAML,WAAW,OAAU,CAC5B,UAAa,wBADZ,iMAQL,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,2J,0LAUTJ,EAAWU,gBAAiB","file":"static/js/docs-enum-fatory-api-enum-factory.df47f681.js","sourcesContent":["\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Link } from 'docz';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"enumfactoryt\"\n    }}><inlineCode parentName=\"h1\">{`enumFactory<T>`}</inlineCode></h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`You should create a enumFactory object for the data you want to generate, you need to specify the type of data. To do this, the\nenumFactory class makes use of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/marak/Faker.js/\"\n      }}>{`Faker.js`}</a>{` package which provides an easy way to generate random data.`}</p>\n    <h2 {...{\n      \"id\": \"type\"\n    }}>{`Type`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`type enumFactory = (generator: T[] | (fake: Faker) => T) => EnumFactory<T>;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"args\"\n    }}>{`args`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`generator (T[] | (fake: Faker) => T)`}</inlineCode>{`: Enum array or generator functions which describes your generated elements. Generator function receives a `}<inlineCode parentName=\"li\">{`faker`}</inlineCode>{` instance as an argument.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"return\"\n    }}>{`return`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`Enum factory object `}</inlineCode><Link to=\"/types#enumfactory\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`(EnumFactory<T>)`}</inlineCode></Link>{`: The enumFactory object contains three methods: `}<Link to=\"/enum-factory-api/get\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`get`}</inlineCode></Link>{`, `}<Link to=\"/enum-factory-api/unique\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`unique`}</inlineCode></Link>{` and `}<Link to=\"/enum-factory-api/seed\" mdxType=\"Link\"><inlineCode parentName=\"li\">{`seed`}</inlineCode></Link>{`.`}</li>\n    </ul>\n    <hr style={{\n      marginTop: '2rem',\n      marginBottom: '2rem',\n      opacity: '0.2'\n    }} />\n    <h2 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { enumFactory } from 'node-factory';\n\nexport type STATUS = ['PENDING', 'CREATED', 'DELETED', 'CANCELLED', 'COMPLETE']\n\nexport const StateFactory = enumFactory<string>(STATUS);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-typescript\"\n      }}>{`import { enumFactory } from 'node-factory';\n\nexport const NameFactory = enumFactory<string>((fake: Faker.FakerStatic) => faker.name.firstName());\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}