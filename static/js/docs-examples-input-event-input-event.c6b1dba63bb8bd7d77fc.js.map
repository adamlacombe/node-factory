{"version":3,"sources":["/Users/olavo/Projects/node-factory/docs/components/FormatJson.tsx","/Users/olavo/Projects/node-factory/docs/examples/input-event/InputEvent.ts","/Users/olavo/Projects/node-factory/docs/examples/input-event/input-event.mdx","/Users/olavo/Projects/node-factory/src/enumFactory.ts","/Users/olavo/Projects/node-factory/src/constants.ts","/Users/olavo/Projects/node-factory/src/factory.ts","/Users/olavo/Projects/node-factory/src/helpers.ts","/Users/olavo/Projects/node-factory/src/index.ts"],"names":["json","styles","parse","style","background","borderLeft","color","margin","padding","fontStyle","fontSize","maxWidth","overflowY","dangerouslySetInnerHTML","__html","number","key","string","boolean","null","JSON","stringify","undefined","replace","match","cls","test","InputEvent","factory","fake","target","value","random","uuid","make","layoutProps","MDXLayout","MDXContent","components","props","mdxType","parentName","FormatJson","isMDXComponent","enumFactory","array","generator","n","isFunction","Array","from","length","faker","map","enumFactoryObject","seed","get","mock","data","rand","helpers","shuffle","slice","unique","N","isArray","partial","pop","DEFAULT_DATABASE_CONFIG","insert","hydrate","database","generate","overrides","merge","count","resolveArgs","model","factoryObject","create","a","Boolean","Promise","all","only","keys","overrideData","reduce","filtered","state","name","stateValues","indexOf","stateData","onInsert","func","onHydrate","isObject","variable","constructor","Object","toString","call","values","override","rest","args","resolved","arg"],"mappings":"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","file":"static/js/docs-examples-input-event-input-event.66f0b1c5.js","sourcesContent":["// tslint:disable\nimport React from 'react';\n\nfunction syntaxHighlight(json) {\n  const styles = {\n    number: 'color: #3490DC',\n    key: 'color: #6CB2EB',\n    string: 'color: #3490DC',\n    boolean: 'color: #621B18',\n    null: 'color: #E3342F',\n  };\n\n  if (typeof json != 'string') {\n       json = JSON.stringify(json, undefined, 2);\n  }\n  json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n      var cls = 'number';\n      if (/^\"/.test(match)) {\n          if (/:$/.test(match)) {\n              cls = 'key';\n          } else {\n              cls = 'string';\n          }\n      } else if (/true|false/.test(match)) {\n          cls = 'boolean';\n      } else if (/null/.test(match)) {\n          cls = 'null';\n      }\n      return '<span style=\"' + styles[cls] + '\">' + match + '</span>';\n  });\n}\n\nexport default ({ parse }) => (\n  <pre style={{\n    background: '#EEF1F5',\n    borderLeft: '5px solid #CED4DE',\n    color: '#7D899C',\n    margin: '-30px 0 25px 2px',\n    padding: '20px',\n    fontStyle: 'italic',\n    fontSize: '18px',\n    maxWidth: '100%',\n    overflowY: 'auto',\n  }} dangerouslySetInnerHTML={{ __html: syntaxHighlight(parse()) }} />\n);\n","import { factory } from '../../../src/index';\n\nconst InputEvent = factory(fake => ({\n  target: {\n    value: fake.random.uuid(),\n  }\n})).make;\n\nexport default InputEvent;\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport InputEvent from './InputEvent';\nimport FormatJson from '../../components/FormatJson';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"input-event\"\n    }}>{`Input event`}</h1>\n    <p>{`One common thing tested when developing app with `}<a parentName=\"p\" {...{\n        \"href\": \"http://reactjs.org/\"\n      }}>{`React.js`}</a>{` is when you type into an\ninput and you want you component to react to this event. To achieve this, you have to do something like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`it('responds to input change', done => {\n  component.find('input#name')\n           .simulate('change', { target: { value: 'NEW VALUE' } });\n\n  expect(component.state('data').name).toBe('NEW VALUE');\n});\n`}</code></pre>\n    <p>{`So, to simulate a simple change event, we have to constantly describe this event object which has a nested\nvalue (which is actually what usually interests us). So, how can we use `}<inlineCode parentName=\"p\">{`node-factory`}</inlineCode>{` to clean this?`}</p>\n    <h2 {...{\n      \"id\": \"inputevent-factory\"\n    }}>{`InputEvent factory`}</h2>\n    <p>{`One thing we can do to make this event simulation a little cleaner is to define an InputEvent factory. For\nsimplicity sake, we're gonna keep this simple:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { factory } from 'node-factory';\n\nconst InputEvent = factory(fake => ({\n  target: {\n    value: fake.random.uuid(),\n  }\n})).make;\n\nexport default InputEvent;\n`}</code></pre>\n    <FormatJson parse={() => InputEvent()} mdxType=\"FormatJson\" />\n    <p>{`In this case, the only method that we're interested is the `}<inlineCode parentName=\"p\">{`create`}</inlineCode>{` method. That being said, we will only export\nthis method.`}</p>\n    <h2 {...{\n      \"id\": \"changing-the-value\"\n    }}>{`Changing the value`}</h2>\n    <p>{`So, from what we know so far, we now set the event value using our factory:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`InputEvent({ target: { value: 'NEW VALUE' } })\n`}</code></pre>\n    <FormatJson parse={() => InputEvent({\n      target: {\n        value: 'NEW VALUE'\n      }\n    })} mdxType=\"FormatJson\" />\n    <p>{`So how does this help us?! It's actually longer now!! Calm down... What you might not know is that `}<inlineCode parentName=\"p\">{`node-factory`}</inlineCode>{`\nhas a shorthand. If you simply pass `}<inlineCode parentName=\"p\">{`{ value: 'NEW VALUE' }`}</inlineCode>{` to the create method, it is smart enough to know\nthat it should update the nested object:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`InputEvent({ value: 'NEW VALUE' })\n`}</code></pre>\n    <FormatJson parse={() => InputEvent({\n      value: 'NEW VALUE'\n    })} mdxType=\"FormatJson\" />\n    <h2 {...{\n      \"id\": \"updating-our-test\"\n    }}>{`Updating our test`}</h2>\n    <p>{`Now, on our tests we can do:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`it('responds to input change', done => {\n  component.find('input#name')\n           .simulate('change', InputEvent({ value: 'NEW VALUE' }));\n\n  expect(component.state('data').name).toBe('NEW VALUE');\n});\n`}</code></pre>\n    <p>{`You can also do this for other events, e.g. Keyboard events (setting a given keyCode), Wheel event, etc., and\nhave a cleaner and more readable interface to test your components.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;","import faker from 'faker';\nimport { isFunction } from './helpers';\nimport { EnumFactory } from './types';\n\nconst enumFactory = <T = any>(array: any[] | ((fake: any) => any)) => {\n  const generator = (n?: number): any[] => {\n    if (isFunction(array) && typeof array === 'function') {\n      return Array.from({ length: n || faker.random.number(10) }).map(() => array(faker));\n    }\n\n    return array as any[];\n  };\n\n  const get = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers.shuffle<T>([...data])[rand];\n    } else if (n < 1) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers\n        .shuffle<T>([...data])\n        .slice(rand, rand + 1);\n    } else {\n      mock = Array.from({ length: n }).map(() => {\n        const data = generator(n);\n        const rand = faker.random.number(data.length - 1);\n        return faker.helpers.shuffle<T>([...data])[rand];\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const unique = (n?: number) => {\n    let mock: any | any[];\n    if (n === undefined) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers.shuffle<T>([...data])[rand];\n    } else if (n < 1) {\n      const data = generator();\n      const rand = faker.random.number(data.length - 1);\n      mock = faker.helpers\n        .shuffle<T>([...data])\n        .slice(rand, rand + 1);\n    } else {\n      const N = !Array.isArray(array) || n < array.length ? n : array.length;\n      const partial = [...generator(N)];\n      mock = Array.from({ length: N }).map(() => {\n        return faker.helpers.shuffle<T>(partial).pop();\n      });\n    }\n\n    faker.seed(faker.random.number());\n\n    return mock as Partial<T>;\n  };\n\n  const seed = (value?: number) => {\n    if (value) {\n      faker.seed(value);\n    }\n    return enumFactoryObject;\n  };\n\n  const enumFactoryObject = { seed, get, unique };\n\n  return enumFactoryObject as EnumFactory<T>;\n};\n\nexport default enumFactory;\n","export const DEFAULT_DATABASE_CONFIG = {\n  async insert(data: any) {\n    return data;\n  },\n  hydrate(data: any) {\n    return data;\n  },\n};\n","import faker from 'faker';\nimport { DEFAULT_DATABASE_CONFIG } from './constants';\nimport { isFunction, merge, resolveArgs } from './helpers';\nimport { DatabaseConfig, DataObject, Factory, FactoryGenerator, GenericExtension, MakeMethod } from './types';\n\nconst factory = <T, A = GenericExtension<T>>(generator: FactoryGenerator) => {\n  const database: DatabaseConfig<T> = DEFAULT_DATABASE_CONFIG;\n\n  const generate = (overrides: DataObject | any[] | null = null) => {\n    const data = generator(faker);\n\n    if (overrides === null) {\n      return merge(data, Array.isArray(data) ? [] : {}) as T;\n    }\n\n    return merge(data, overrides) as T;\n  };\n\n  const make = (count?: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n    let mock: T | T[];\n    if (count === undefined) {\n      mock = generate() as T;\n    } else if (count < 1) {\n      mock = [generate()] as T[];\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else if (isFunction(count) && typeof count === 'function') {\n      mock = generate(count(faker)) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return mock.map((model: T) => {\n        return database.hydrate(model);\n      });\n    }\n\n    return database.hydrate(mock);\n  };\n\n  const create = async (count?: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n    let mock: T | T[];\n    if (count != null && count < 1) {\n      mock = [generate()] as T[];\n    } else if (!Boolean(count)) {\n      mock = generate() as T;\n    } else if (typeof count === 'object') {\n      mock = generate(count) as T;\n    } else if (isFunction(count) && typeof count === 'function') {\n      mock = generate(count(faker)) as T;\n    } else {\n      const { data, length } = resolveArgs(count, overrides);\n      mock = Array.from({ length }).map(() => generate(data)) as T[];\n    }\n\n    faker.seed(faker.random.number());\n\n    if (Array.isArray(mock)) {\n      return await Promise.all(\n        mock.map(async (model: T) => {\n          await database.insert(model);\n          return database.hydrate(model);\n        }),\n      );\n    }\n\n    await database.insert(mock);\n    return database.hydrate(mock);\n  };\n\n  const only = (keys: keyof T | Array<keyof T>, overrides: DataObject | FactoryGenerator = {}) => {\n    const overrideData = isFunction(overrides) && typeof overrides === 'function' ? overrides(faker) : overrides;\n    const data = make(overrideData);\n\n    return (Array.isArray(keys)\n      ? keys.reduce((filtered: Partial<T>, key) => ({ ...filtered, [key]: (data as Partial<T>)[key] }), {})\n      : { [keys]: (data as Partial<T>)[keys] }) as Partial<T>;\n  };\n\n  const seed = (value: number) => {\n    faker.seed(value);\n    return factoryObject;\n  };\n\n  const state = (name: string, stateValues: DataObject | FactoryGenerator) => {\n    if (['create', 'make', 'only', 'seed', 'state', 'onInsert', 'onHydrate'].indexOf(name) < 0) {\n      const stateData = isFunction(stateValues) && typeof stateValues === 'function' ? stateValues(faker) : stateValues;\n      const makeMethod = (count: number | DataObject | FactoryGenerator, overrides?: DataObject | FactoryGenerator) => {\n        let mock: T | T[];\n        if (count === undefined) {\n          mock = generate(stateData) as T;\n        } else if (count < 1) {\n          mock = [generate(stateData)] as T[];\n        } else if (typeof count === 'object') {\n          mock = generate({ ...stateData, ...count }) as T;\n        } else if (isFunction(count) && typeof count === 'function') {\n          mock = generate({ ...stateData, ...count(faker) }) as T;\n        } else {\n          const { data, length } = resolveArgs(count, overrides);\n          mock = Array.from({ length }).map(() => generate({ ...stateData, ...data })) as T[];\n        }\n\n        faker.seed(faker.random.number());\n\n        if (Array.isArray(mock)) {\n          return mock.map((model: T) => {\n            return database.hydrate(model);\n          });\n        }\n\n        return database.hydrate(mock);\n      };\n\n      (factoryObject as any)[name as keyof A] = makeMethod as MakeMethod<T>;\n    }\n  };\n\n  const onInsert = (func: (data: T) => Promise<any>) => {\n    database.insert = func;\n\n    return factoryObject;\n  };\n\n  const onHydrate = (func: (data: T) => Promise<any>) => {\n    database.hydrate = func;\n\n    return factoryObject;\n  };\n\n  const factoryObject = { create, make, only, seed, state, onInsert, onHydrate };\n\n  return factoryObject as Factory<T> & A;\n};\n\nexport default factory;\n","import faker from 'faker';\nimport { DataObject } from './types';\n\nexport const isObject = (variable: any) => {\n  return variable && typeof variable === 'object' && variable.constructor === Object;\n};\n\nexport const isFunction = (variable: any) => {\n  return variable && {}.toString.call(variable) === '[object Function]';\n};\n\nexport const merge = (data: DataObject, overrides: DataObject): DataObject => {\n  if (Array.isArray(data) && Array.isArray(overrides)) {\n    return data.map((value: any, key: number) => {\n      return key < overrides.length ? overrides[key] : value;\n    });\n  }\n  return Object.keys(data).reduce((values, key) => {\n    if (Object.keys(overrides).indexOf(key) < 0) {\n      return {\n        ...values,\n        [key]: !isObject(data[key]) ? data[key] : merge(data[key], overrides),\n      };\n    }\n\n    const { [key]: override, ...rest } = overrides;\n    values = { ...values, [key]: override };\n    overrides = rest;\n\n    return values;\n  }, {});\n};\n\nexport const resolveArgs = (...args: any[]): DataObject =>\n  args.reduce(\n    (resolved, arg) => {\n      if (typeof arg === 'number') {\n        return { ...resolved, length: arg > 0 ? arg : 1 };\n      } else if (typeof arg === 'object') {\n        return { ...resolved, data: arg };\n      } else if (isFunction(arg) && typeof arg === 'function') {\n        return { ...resolved, data: arg(faker) };\n      } else {\n        return resolved;\n      }\n    },\n    { length: 1, data: {} },\n  );\n","export * from './types';\nexport { default as factory } from './factory';\nexport { default as enumFactory } from './enumFactory';\n"],"sourceRoot":""}